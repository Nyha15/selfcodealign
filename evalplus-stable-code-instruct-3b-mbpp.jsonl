{"task_id": "Mbpp/2", "completion": "\ndef similar_elements(list1, list2):\n    return list(set(list1) & set(list2))\n\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n"}
{"task_id": "Mbpp/3", "completion": "\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"}
{"task_id": "Mbpp/4", "completion": "\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return sorted(set(nums), reverse=True)[:n]\n\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n"}
{"task_id": "Mbpp/6", "completion": "\ndef differ_At_One_Bit_Pos(x, y):\n    xor_res = x ^ y\n    count = 0\n    while xor_res:\n        if xor_res & 1:\n            count += 1\n        xor_res >>= 1\n    return count == 1\n"}
{"task_id": "Mbpp/7", "completion": "\ndef find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]\n"}
{"task_id": "Mbpp/8", "completion": "\ndef square_nums(lst):\n    return [i ** 2 for i in lst]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"}
{"task_id": "Mbpp/9", "completion": "\ndef find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return 1\n    return n\n\nassert find_Rotations(\"aaaa\") == 1\n"}
{"task_id": "Mbpp/11", "completion": "\ndef remove_Occ(string, char):\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    if first_index!= -1 and last_index!= -1 and first_index!= last_index:\n        return string[:first_index] + string[last_index+1:]\n    else:\n        return string\n\nprint(remove_Occ(\"hello\",\"l\")) # Output: \"heo\"\n"}
{"task_id": "Mbpp/12", "completion": "\ndef sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    # Zip the matrix and row_sums together\n    zipped = list(zip(matrix, row_sums))\n    # Sort the zipped list based on the second element of each tuple\n    sorted_zipped = sorted(zipped, key=lambda x: x[1])\n    # Extract the sorted matrix\n    sorted_matrix = [row for row, _ in sorted_zipped]\n    return sorted_matrix\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"}
{"task_id": "Mbpp/14", "completion": "\ndef find_Volume(a, b, c):\n    \"\"\"\n    Function to calculate the volume of a triangular prism.\n    \n    Parameters:\n    a (int): length of the base of the triangular face\n    b (int): height of the triangular face\n    c (int): length of the slant height of the triangular face\n    \n    Returns:\n    int: volume of the triangular prism\n    \"\"\"\n    # calculate the area of the triangular face\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    # calculate the volume of the triangular prism\n    volume = area * a * b / 2\n    return volume\n\n# test the function\nassert find_Volume(10,8,6) == 240\n"}
{"task_id": "Mbpp/16", "completion": "\ndef text_lowercase_underscore(input_string):\n    return any(input_string[i:].startswith(input_string[i].lower() + \"_\"*(len(input_string[i:].split(\"_\")[0])-1)) for i in range(len(input_string)))\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n"}
{"task_id": "Mbpp/17", "completion": "\ndef square_perimeter(side_length):\n    return 4 * side_length\n"}
{"task_id": "Mbpp/18", "completion": "\ndef remove_dirty_chars(main_string, remove_chars):\n    for char in remove_chars:\n        if char in main_string:\n            main_string = main_string.replace(char, '')\n    return main_string\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n"}
{"task_id": "Mbpp/19", "completion": "\ndef test_duplicate(arr):\n    return len(arr)!= len(set(arr))\n"}
{"task_id": "Mbpp/20", "completion": "\ndef is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n    A woodball is a number that can be expressed as the sum of two or more consecutive non-zero natural numbers.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    # Generate all consecutive non-zero natural numbers\n    nums = [i for i in range(1, n) if i!= 0]\n\n    # Check if the number can be expressed as the sum of two or more consecutive non-zero natural numbers\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n\n    return False\n"}
{"task_id": "Mbpp/56", "completion": "\ndef check(n):\n    reverse = int(str(n)[::-1])\n    return n == reverse - 1\n"}
{"task_id": "Mbpp/57", "completion": "\ndef find_Max_Num(nums):\n    # Sort the list in reverse order\n    nums.sort(reverse=True)\n    # Join the list elements to form a string\n    max_num = ''.join(map(str, nums))\n    # Return the largest number\n    return int(max_num)\n\n# Test the function\nassert find_Max_Num([1,2,3]) == 321\n"}
{"task_id": "Mbpp/58", "completion": "\ndef opposite_Signs(a, b):\n    return (a >= 0)!= (b >= 0)\n"}
{"task_id": "Mbpp/59", "completion": "\ndef is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n    \"\"\"\n    return n * (2*n - 1)\n\n# Test the function\nassert is_octagonal(5) == 65\n"}
{"task_id": "Mbpp/61", "completion": "\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            if sum(int(d) for d in sub_str) == len(sub_str):\n                count += 1\n    return count\n\nassert count_Substrings('112112') == 6\n"}
{"task_id": "Mbpp/62", "completion": "\ndef smallest_num(lst):\n    return min(lst)\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n"}
{"task_id": "Mbpp/63", "completion": "\ndef max_difference(tuples):\n    # Initialize max difference and min element\n    max_diff = 0\n    min_elem = float('inf')\n\n    # Iterate over each tuple in the list\n    for tup in tuples:\n        # Update min_elem if current element is smaller\n        min_elem = min(min_elem, tup[1])\n        \n        # Calculate difference and update max_diff if necessary\n        max_diff = max(max_diff, tup[0] - min_elem)\n    \n    return max_diff\n"}
{"task_id": "Mbpp/64", "completion": "\ndef sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nsubject_marks = sort_tuples\n"}
{"task_id": "Mbpp/65", "completion": "\ndef recursive_list_sum(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of all its elements.\n    If an element of the list is also a list, the function will recursively call itself on that element.\n    \"\"\"\n    total = 0\n    for i in lst:\n        if isinstance(i, list):\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n\n# Test the function\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n"}
{"task_id": "Mbpp/66", "completion": "\ndef pos_count(lst):\n    return sum(1 for num in lst if num > 0)\n\nassert pos_count([1,-2,3,-4]) == 2\n"}
{"task_id": "Mbpp/67", "completion": "\ndef bell_number(n):\n    bell = [0, 1, 1, 2, 4, 7, 13, 24, 44, 81]\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell[n] + bell_number(n-1)\n\nassert bell_number(2)==2\n"}
{"task_id": "Mbpp/68", "completion": "\ndef is_Monotonic(arr):\n    # Check if the array is empty\n    if len(arr) == 0:\n        return True\n\n    # Check if the array is strictly increasing\n    if all(arr[i] < arr[i + 1] for i in range(len(arr) - 1)):\n        return True\n\n    # Check if the array is strictly decreasing\n    if all(arr[i] > arr[i + 1] for i in range(len(arr) - 1)):\n        return True\n\n    # If none of the above conditions are met, the array is not monotonic\n    return False\n"}
{"task_id": "Mbpp/69", "completion": "\ndef is_sublist(lst, sublist):\n    if sublist == []:\n        return True\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i+len(sublist)] == sublist:\n            return True\n    return False\n"}
{"task_id": "Mbpp/70", "completion": "\ndef get_equal(tuples):\n    # Get the length of the first tuple\n    ref_length = len(tuples[0])\n    \n    # Check if all tuples have the same length\n    return all(len(tup) == ref_length for tup in tuples)\n\n# Test the function\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n"}
{"task_id": "Mbpp/71", "completion": "\ndef comb_sort(arr):\n    gap = len(arr)\n    swapped = True\n    while gap > 1 or swapped is True:\n        gap = max(1, int(gap/1.3))\n        swapped = False\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n            i += 1\n    return arr\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n"}
{"task_id": "Mbpp/72", "completion": "\ndef dif_Square(n):\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i + j*j == n):\n                return True\n            j += 1\n        i += 1\n    return False\n\nassert dif_Square(5) == True\n"}
{"task_id": "Mbpp/74", "completion": "\ndef is_samepatterns(patterns, sequence):\n    if len(patterns)!= len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= sequence[i] and patterns[i]!= sequence[i-1]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/75", "completion": "\ndef find_tuples(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if all(el % k == 0 for el in t):\n            result.append(t)\n    return result\n\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n"}
{"task_id": "Mbpp/77", "completion": "\ndef is_Divisible_by_11(n):\n    # convert the number to string\n    str_n = str(n)\n    # calculate the sum of the digits\n    sum_digits = sum(int(digit) for digit in str_n)\n    # check if the number is divisible by 11\n    return n % 11 == 0 or sum_digits % 11 == 0\n\n# test the function\nassert is_Divisible_by_11(12345) == False\n"}
{"task_id": "Mbpp/79", "completion": "\ndef word_len(word):\n    return len(word) % 2 == 0\n"}
{"task_id": "Mbpp/80", "completion": "\ndef tetrahedral_number(n):\n    \"\"\"\n    Function to find the nth tetrahedral number.\n    A tetrahedral number is the sum of the first n natural numbers.\n    The formula to calculate the nth tetrahedral number is:\n    T_n = n*(n+1)*(n+2)//6\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n# Test the function\nassert tetrahedral_number(5) == 35\n"}
{"task_id": "Mbpp/82", "completion": "\nimport math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius**3)\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n"}
{"task_id": "Mbpp/83", "completion": "\ndef get_Char(string):\n    total = 0\n    for char in string:\n        total += ord(char) % 26\n    return chr(total % 26 + ord('a'))\n\nassert get_Char(\"abc\") == \"f\"\n"}
{"task_id": "Mbpp/84", "completion": "\ndef sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\nassert sequence(10) == 6\n"}
{"task_id": "Mbpp/85", "completion": "\nimport math\n\ndef surfacearea_sphere(radius):\n    surface_area = 4 * math.pi * radius**2\n    return surface_area\n"}
{"task_id": "Mbpp/86", "completion": "\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Function to find nth centered hexagonal number.\n    \n    Parameters:\n    n (int): The position of the hexagonal number in the sequence.\n    \n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1) // 2\n"}
{"task_id": "Mbpp/87", "completion": "\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n"}
{"task_id": "Mbpp/88", "completion": "\ndef freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n"}
{"task_id": "Mbpp/89", "completion": "\ndef closest_num(n):\n    if n <= 2:\n        return 1\n    else:\n        return n - (n % 2)\n\nassert closest_num(11) == 10\n"}
{"task_id": "Mbpp/90", "completion": "\ndef len_log(words):\n    return max(len(word) for word in words)\n\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n"}
{"task_id": "Mbpp/91", "completion": "\ndef find_substring(lst, sub):\n    for string in lst:\n        if sub in string:\n            return True\n    return False\n\n# Test the function\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n"}
{"task_id": "Mbpp/92", "completion": "\ndef is_undulating(n):\n    n_str = str(n)\n    for i in range(len(n_str) // 2):\n        if n_str[i]!= n_str[-i - 1]:\n            return False\n    return True\n\nassert is_undulating(1212121) == True\n"}
{"task_id": "Mbpp/93", "completion": "\ndef power(a, b):\n    return a ** b\n"}
{"task_id": "Mbpp/94", "completion": "\ndef index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n"}
{"task_id": "Mbpp/95", "completion": "\ndef Find_Min_Length(lists):\n    if not lists:\n        return 0\n    min_length = len(lists[0])\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n"}
{"task_id": "Mbpp/96", "completion": "\ndef divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i!= n // i:\n                count += 1\n    return count\n\nassert divisor(15) == 4\n"}
{"task_id": "Mbpp/97", "completion": "\ndef frequency_lists(lists):\n    frequency = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency\n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n"}
{"task_id": "Mbpp/98", "completion": "\nimport math\n\ndef multiply_num(lst):\n    if len(lst) == 0:\n        return 0\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n"}
{"task_id": "Mbpp/99", "completion": "\ndef decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    \n    binary_string = ''\n    while decimal_number > 0:\n        binary_string = str(decimal_number % 2) + binary_string\n        decimal_number //= 2\n    \n    return binary_string\n"}
{"task_id": "Mbpp/100", "completion": "\ndef next_smallest_palindrome(n):\n    # Check if the number is already a palindrome\n    if str(n) == str(n)[::-1]:\n        return n + 1\n\n    # Find the next odd number\n    while True:\n        n += 1\n        if n % 2!= 0:\n            break\n\n    # Check each half of the number to see if it's a palindrome\n    while True:\n        # Check the left half\n        if str(n)[::-1] == str(n)[:len(str(n))//2]:\n            # Check the right half\n            if str(n)[len(str(n))//2:] == str(n)[len(str(n))//2:][::-1]:\n                return int(str(n) + str(n)[::-1][len(str(n))//2:])\n\n        # If we can't find a palindrome, increment the number and continue\n        n += 1\n\n# Test the function\nassert next_smallest_palindrome(99) == 101\n"}
{"task_id": "Mbpp/101", "completion": "\ndef kth_element(arr, k):\n    return sorted(arr)[k-1]\n"}
{"task_id": "Mbpp/102", "completion": "\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)\n\nassert snake_to_camel('python_program')=='PythonProgram'\n"}
{"task_id": "Mbpp/103", "completion": "\ndef eulerian_num(n, m):\n    if n == 1 and m == 1:\n        return 4\n    else:\n        return 0\n"}
{"task_id": "Mbpp/104", "completion": "\ndef sort_sublists(lists):\n    return [sorted(sublist) for sublist in lists]\n"}
{"task_id": "Mbpp/105", "completion": "\ndef count(lst):\n    return sum(lst)\n"}
{"task_id": "Mbpp/106", "completion": "\ndef add_lists(lst, tpl):\n    return tpl + tuple(lst)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n"}
{"task_id": "Mbpp/108", "completion": "\ndef merge_sorted_list(lst1, lst2, lst3):\n    lst1.sort()\n    lst2.sort()\n    lst3.sort()\n    return sorted(lst1 + lst2 + lst3)\n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n"}
{"task_id": "Mbpp/109", "completion": "\ndef odd_Equivalent(binary_string, rotations):\n    # Convert binary string to integer\n    num = int(binary_string, 2)\n    \n    # Perform the rotations\n    for _ in range(rotations):\n        num = (num << 1) | (num & 1)\n    \n    # Count the odd numbers\n    count = 0\n    while num:\n        if num & 1:\n            count += 1\n        num >>= 1\n    \n    return count\n\n# Test the function\nassert odd_Equivalent(\"011001\",6) == 3\n"}
{"task_id": "Mbpp/111", "completion": "\ndef common_in_nested_lists(nested_lists):\n    # Flatten the list of lists\n    flat_list = [item for sublist in nested_lists for item in sublist]\n    \n    # Find the common elements\n    common_elements = set(flat_list) & set(flat_list[0])\n    \n    return list(common_elements)\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n"}
{"task_id": "Mbpp/113", "completion": "\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "Mbpp/115", "completion": "\ndef empty_dit(lst):\n    return all(not bool(d) for d in lst)\n"}
{"task_id": "Mbpp/116", "completion": "\ndef tuple_to_int(tup):\n    result = 0\n    for num in tup:\n        result = result * 10 + num\n    return result\n\nassert tuple_to_int((1,2,3))==123\n"}
{"task_id": "Mbpp/117", "completion": "\ndef list_to_float(lst):\n    return [(float(i[0]), float(i[1])) if isinstance(i, tuple) else float(i) for i in lst]\n\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n"}
{"task_id": "Mbpp/118", "completion": "\ndef string_to_list(s):\n    return s.split()\n\nassert string_to_list(\"python programming\")==['python','programming']\n"}
{"task_id": "Mbpp/119", "completion": "\ndef search(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[mid + 1]:\n            return nums[mid + 1]\n        else:\n            left = mid + 1\n    return nums[left]\n"}
{"task_id": "Mbpp/120", "completion": "\ndef max_product_tuple(lst):\n    max_product = 0\n    for pair in lst:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n"}
{"task_id": "Mbpp/123", "completion": "\ndef amicable_numbers_sum(n):\n    def find_divisors(num):\n        divisors = [1]\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i * i!= num:\n                    divisors.append(int(num / i))\n        return divisors\n\n    def is_amicable(num):\n        divisors = find_divisors(num)\n        sum_divisors = sum(divisors)\n        if sum_divisors > num and all(i not in divisors for i in find_divisors(sum_divisors)) and sum_divisors <= n:\n            return True\n        return False\n\n    return sum(i for i in range(1, n + 1) if is_amicable(i))\n\nprint(amicable_numbers_sum(999))  # Output: 504\n"}
{"task_id": "Mbpp/124", "completion": "\nimport cmath\nimport math\n\ndef angle_complex(a, b):\n    \"\"\"\n    Function to get the angle of a complex number.\n    \n    Parameters:\n    a (complex): The real part of the complex number.\n    b (complex): The imaginary part of the complex number.\n    \n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    # Calculate the magnitude of the complex number\n    magnitude = abs(a + b * 1j)\n    \n    # Calculate the angle of the complex number\n    angle = cmath.phase(a + b * 1j)\n    \n    # Convert the angle from radians to degrees\n    angle_degrees = math.degrees(angle)\n    \n    # Return the angle of the complex number\n    return angle_degrees\n"}
{"task_id": "Mbpp/125", "completion": "\ndef find_length(s):\n    max_diff = 0\n    for i in range(len(s)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(s)):\n            if s[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\nassert find_length(\"11000010001\") == 6\n"}
{"task_id": "Mbpp/126", "completion": "\ndef sum_common_divisors(num1, num2):\n    divisors1 = [i for i in range(1, num1+1) if num1 % i == 0]\n    divisors2 = [i for i in range(1, num2+1) if num2 % i == 0]\n    common_divisors = list(set(divisors1) & set(divisors2))\n    return sum(common_divisors)\n\nassert sum_common_divisors(10, 15) == 6\n"}
{"task_id": "Mbpp/127", "completion": "\ndef multiply_int(a, b):\n    return a * b\n\nassert multiply_int(10,20)==200\n"}
{"task_id": "Mbpp/128", "completion": "\ndef long_words(n, sentence):\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']\n"}
{"task_id": "Mbpp/129", "completion": "\ndef magic_square_test(matrix):\n    # Get the size of the matrix\n    size = len(matrix)\n    \n    # Calculate the sum of the first row\n    first_row_sum = sum(matrix[0])\n    \n    # Check if all rows have the same sum\n    for row in matrix:\n        if sum(row)!= first_row_sum:\n            return False\n    \n    # Check if all columns have the same sum\n    for col in range(size):\n        col_sum = 0\n        for row in range(size):\n            col_sum += matrix[row][col]\n        if col_sum!= first_row_sum:\n            return False\n    \n    # Check if the two diagonals have the same sum\n    diagonal1_sum = 0\n    diagonal2_sum = 0\n    for i in range(size):\n        diagonal1_sum += matrix[i][i]\n        diagonal2_sum += matrix[i][size - i - 1]\n    if diagonal1_sum!= first_row_sum or diagonal2_sum!= first_row_sum:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True\n"}
{"task_id": "Mbpp/130", "completion": "\ndef max_occurrences(lst):\n    # Create a dictionary to store the frequency of each item\n    frequency_dict = {}\n    for item in lst:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    # Find the item with maximum frequency\n    max_frequency = max(frequency_dict.values())\n    max_occurrences_item = [item for item, frequency in frequency_dict.items() if frequency == max_frequency]\n    \n    # If there are multiple items with the same maximum frequency, return the first one\n    return max_occurrences_item[0] if len(max_occurrences_item) == 1 else None\n"}
{"task_id": "Mbpp/131", "completion": "\ndef reverse_vowels(s):\n    vowels = 'aeiou'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i].lower() not in vowels:\n            i += 1\n        elif s[j].lower() not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\nassert reverse_vowels(\"Python\") == \"Python\"\n"}
{"task_id": "Mbpp/132", "completion": "\ndef tup_string(tup):\n    return ''.join(tup)\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))==(\"exercises\")\n"}
{"task_id": "Mbpp/133", "completion": "\ndef sum_negativenum(lst):\n    return sum(i for i in lst if i < 0)\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n"}
{"task_id": "Mbpp/135", "completion": "\ndef hexagonal_num(n):\n    \"\"\"\n    Function to find the nth hexagonal number.\n    \n    Parameters:\n    n (int): The position of the hexagonal number to be found.\n    \n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n * (3 * n - 1) // 2\n"}
{"task_id": "Mbpp/137", "completion": "\nimport math\n\ndef zero_count(arr):\n    # Count the number of zeroes and non-zeroes in the array\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        elif num!= 0:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count if non_zero_count!= 0 else 0\n\n    return ratio\n"}
{"task_id": "Mbpp/138", "completion": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    i = 0\n    while 2**i <= n:\n        if (n - 2**i) % (2**i) == 0:\n            return True\n        i += 1\n    return False\n\nassert is_Sum_Of_Powers_Of_Two(10) == True\n"}
{"task_id": "Mbpp/139", "completion": "\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n"}
{"task_id": "Mbpp/140", "completion": "\ndef extract_singly(nested_list):\n    flattened_list = []\n    for sublist in nested_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)\n"}
{"task_id": "Mbpp/141", "completion": "\ndef pancake_sort(lst):\n    for i in range(len(lst)):\n        max_index = i\n        for j in range(i + 1, len(lst)):\n            if lst[j] > lst[max_index]:\n                max_index = j\n        lst[i], lst[max_index] = lst[max_index], lst[i]\n    return lst\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n"}
{"task_id": "Mbpp/142", "completion": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/143", "completion": "\ndef find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test the function\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n"}
{"task_id": "Mbpp/145", "completion": "\ndef max_Abs_Diff(arr):\n    return max(abs(i - j) for i, j in zip(arr, arr[1:]))\n\nassert max_Abs_Diff((2,1,5,3)) == 4\n"}
{"task_id": "Mbpp/160", "completion": "\ndef find_solution(a, b, n):\n    for x in range(-n // abs(a), n // abs(a) + 1):\n        y = (n - a * x) // b\n        if a * x + b * y == n:\n            return (x, y)\n    return None\n"}
{"task_id": "Mbpp/161", "completion": "\ndef remove_elements(lst, remove_list):\n    return [element for element in lst if element not in remove_list]\n\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n"}
{"task_id": "Mbpp/162", "completion": "\ndef sum_series(n):\n    total = 0\n    i = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total\n\nassert sum_series(6) == 12\n"}
{"task_id": "Mbpp/164", "completion": "\ndef are_equivalent(num1, num2):\n    def sum_divisors(n):\n        sum = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                sum += i\n                if i!= n // i:\n                    sum += n // i\n        return sum\n\n    return sum_divisors(num1) == sum_divisors(num2)\n"}
{"task_id": "Mbpp/165", "completion": "\ndef count_char_position(s):\n    count = 0\n    for char in s:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n\nassert count_char_position(\"xbcefg\") == 2\n"}
{"task_id": "Mbpp/166", "completion": "\ndef find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n"}
{"task_id": "Mbpp/167", "completion": "\ndef next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** int(math.ceil(math.log2(n)))\n"}
{"task_id": "Mbpp/168", "completion": "\ndef frequency(lst, num):\n    return lst.count(num)\n"}
{"task_id": "Mbpp/170", "completion": "\ndef sum_range_list(lst, start_index, end_index):\n    return sum(lst[start_index:end_index+1])\n\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n"}
{"task_id": "Mbpp/171", "completion": "\ndef perimeter_pentagon(side_length):\n    \"\"\"\n    Function to find the perimeter of a regular pentagon from the length of its sides.\n    \n    Parameters:\n    side_length (int or float): The length of a side of the pentagon.\n    \n    Returns:\n    int or float: The perimeter of the pentagon.\n    \"\"\"\n    return 5 * side_length\n"}
{"task_id": "Mbpp/172", "completion": "\ndef count_occurance(string):\n    return string.count('std')\n\nassert count_occurance(\"letstdlenstdporstd\") == 3\n"}
{"task_id": "Mbpp/222", "completion": "\ndef check_type(tup):\n    type_first = type(tup[0])\n    for i in tup:\n        if type(i)!= type_first:\n            return False\n    return True\n"}
{"task_id": "Mbpp/223", "completion": "\ndef is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n // 2\n"}
{"task_id": "Mbpp/224", "completion": "\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nassert count_Set_Bits(2) == 1\n"}
{"task_id": "Mbpp/226", "completion": "\ndef odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n\nassert odd_values_string('abcdef') == 'ace'\n"}
{"task_id": "Mbpp/227", "completion": "\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n"}
{"task_id": "Mbpp/229", "completion": "\ndef re_arrange_array(arr, n):\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    return negative + positive\n\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n"}
{"task_id": "Mbpp/230", "completion": "\ndef replace_blank(string, character):\n    return string.replace(\" \", character)\n"}
{"task_id": "Mbpp/232", "completion": "\ndef larg_nnum(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]\n"}
{"task_id": "Mbpp/233", "completion": "\nimport math\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Function to calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): radius of the cylinder\n    height (float): height of the cylinder\n\n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    return 2 * math.pi * radius * (radius + height)\n"}
{"task_id": "Mbpp/234", "completion": "\ndef volume_cube(side_length):\n    return side_length ** 3\n"}
{"task_id": "Mbpp/235", "completion": "\ndef even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \"\"\"\n    # Iterate over each bit in the number\n    for i in range(31, -1, -1):\n        # Check if the bit is even\n        if (n & (1 << i))!= 0:\n            # Set the bit to 1\n            n |= (1 << i)\n    return n\n"}
{"task_id": "Mbpp/237", "completion": "\ndef check_occurences(lst):\n    occurences = {}\n    for tup in lst:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n"}
{"task_id": "Mbpp/238", "completion": "\ndef number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]!= \"\":\n                count += 1\n    return count\n\nassert number_of_substrings(\"abc\") == 6\n"}
{"task_id": "Mbpp/239", "completion": "\ndef get_total_number_of_sequences(m, n):\n    # Initialize a list to store the number of sequences for each length\n    sequence_counts = [0] * (n + 1)\n    \n    # Base case: there is only 1 sequence of length 0 (an empty sequence)\n    sequence_counts[0] = 1\n    \n    # Iterate over the length of the sequence from 1 to n\n    for i in range(1, n + 1):\n        # Iterate over all possible previous elements\n        for j in range(1, m + 1):\n            # If the current element is greater than or equal to twice the previous element\n            # and less than or equal to m, add the number of sequences of length i - 1\n            # that end with the previous element to the current element\n            if j * 2 <= m:\n                sequence_counts[i] += sequence_counts[i - 1]\n        \n        # If the current element is equal to m, add the number of sequences of length i - 1\n        # that end with m to the current element\n        if m == j:\n            sequence_counts[i] += sequence_counts[i - 1]\n    \n    # Return the total number of sequences of length n\n    return sequence_counts[n]\n"}
{"task_id": "Mbpp/240", "completion": "\ndef replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1\n"}
{"task_id": "Mbpp/242", "completion": "\ndef count_charac(string):\n    return len(string)\n\nassert count_charac(\"python programming\")==18\n"}
{"task_id": "Mbpp/244", "completion": "\ndef next_Perfect_Square(n):\n    import math\n    # Calculate the square root of the given number\n    sqrt = math.sqrt(n)\n    # If the square root is an integer, return the next perfect square\n    if sqrt.is_integer():\n        return int(sqrt) ** 2 + 1\n    else:\n        # If the square root is not an integer, find the nearest integer greater than the square root\n        next_int = int(sqrt) + 1\n        # Return the next perfect square\n        return next_int ** 2\n\n# Test the function\nassert next_Perfect_Square(35) == 36\n"}
{"task_id": "Mbpp/245", "completion": "\ndef max_sum(arr):\n    n = len(arr)\n    dp_up = [0]*n\n    dp_down = [0]*n\n    dp_up[0] = arr[0]\n    dp_down[0] = arr[0]\n    for i in range(1, n):\n        dp_up[i] = max(dp_up[i-1], dp_down[i-1] + arr[i])\n        dp_down[i] = max(dp_down[i-1], dp_up[i-1] - arr[i])\n    return max(dp_up[-1], dp_down[-1])\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n"}
{"task_id": "Mbpp/247", "completion": "\ndef lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\nassert lps(\"TENS FOR TENS\") == 5\n"}
{"task_id": "Mbpp/249", "completion": "\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n"}
{"task_id": "Mbpp/250", "completion": "\ndef count_X(tup, element):\n    return tup.count(element)\n\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n"}
{"task_id": "Mbpp/251", "completion": "\ndef insert_element(lst, element):\n    return [element] + [x for x in lst if x!= element] + [element]\n\nassert insert_element(['Red', 'Green', 'Black'],'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n"}
{"task_id": "Mbpp/252", "completion": "\nimport cmath\n\ndef convert(z):\n    magnitude = abs(z)\n    angle = cmath.phase(z)\n    return (magnitude, angle)\n\nassert convert(1) == (1.0, 0.0)\n"}
{"task_id": "Mbpp/253", "completion": "\ndef count_integer(lst):\n    return sum(1 for el in lst if isinstance(el, int))\n\nassert count_integer([1,2,'abc',1.2]) == 2\n"}
{"task_id": "Mbpp/255", "completion": "\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \n    Parameters:\n    lst (list): A list of elements\n    n (int): The length of the combinations to generate\n    \n    Returns:\n    list: A list of tuples representing the combinations\n    \"\"\"\n    \n    # Import the combinations function from itertools module\n    from itertools import combinations_with_replacement\n    \n    # Use the combinations_with_replacement function to generate the combinations\n    combs = list(combinations_with_replacement(lst, n))\n    \n    # Convert the combinations to tuples and return the list\n    return [tuple(comb) for comb in combs]\n"}
{"task_id": "Mbpp/256", "completion": "\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = []\n    for possiblePrime in range(2, n):\n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n    return len(primes)\n"}
{"task_id": "Mbpp/257", "completion": "\ndef swap_numbers(num1, num2):\n    return (num2, num1)\n\nassert swap_numbers(10,20)==(20,10)\n"}
{"task_id": "Mbpp/259", "completion": "\ndef maximize_elements(tuple1, tuple2):\n    # Combine the two tuples\n    combined_tuples = list(zip(tuple1, tuple2))\n    \n    # Sort the combined tuples in descending order based on the second element of each tuple\n    sorted_tuples = sorted(combined_tuples, key=lambda x: x[1], reverse=True)\n    \n    # Extract the first element of each tuple from the sorted tuples\n    result = tuple(map(lambda x: x[0], sorted_tuples))\n    \n    return result\n\n# Test the function\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n"}
{"task_id": "Mbpp/260", "completion": "\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def shanks_williams_sequence(start, end):\n        primes = []\n        i = start\n        while len(primes) < end:\n            if is_prime(i):\n                primes.append(i)\n            i += 1\n        return primes\n\n    sequence = shanks_williams_sequence(11, n + 1)\n    return sequence[-1]\n\nassert newman_prime(3) == 7\n"}
{"task_id": "Mbpp/261", "completion": "\ndef division_elements(tuple1, tuple2):\n    # Ensure both inputs are tuples\n    assert isinstance(tuple1, tuple) and isinstance(tuple2, tuple), \"Inputs must be tuples\"\n    \n    # Ensure both tuples have the same length\n    assert len(tuple1) == len(tuple2), \"Both tuples must have the same length\"\n    \n    # Perform element-wise division\n    return tuple(tuple1[i] / tuple2[i] for i in range(len(tuple1)))\n\n# Test the function\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n"}
{"task_id": "Mbpp/262", "completion": "\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n"}
{"task_id": "Mbpp/264", "completion": "\ndef dog_age(human_age):\n    base_age = human_age\n    if human_age < 1:\n        return 0\n    elif human_age < 2:\n        return base_age * 1\n    elif human_age < 3:\n        return base_age * 1.5\n    elif human_age < 4:\n        return base_age * 2\n    else:\n        return base_age * 2 + (human_age - 4) * 1.5\n\nassert dog_age(12) == 61\n"}
{"task_id": "Mbpp/265", "completion": "\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'],3)==[['a', 'd', 'g', 'j','m'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n"}
{"task_id": "Mbpp/266", "completion": "\ndef lateralsurface_cube(side_length):\n    \"\"\"\n    This function calculates the lateral surface area of a cube given its side length.\n    The formula for lateral surface area of a cube is 6 * (side_length ^ 2).\n    \"\"\"\n    return 6 * (side_length ** 2)\n\n# Test the function\nassert lateralsurface_cube(5) == 100\n"}
{"task_id": "Mbpp/267", "completion": "\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n*2+1, 2):\n        sum += i**2\n    return sum\n\nassert square_Sum(2) == 10\n"}
{"task_id": "Mbpp/268", "completion": "\ndef find_star_num(n):\n    star_num = 0\n    for i in range(1, n+1):\n        star_num += i\n    return star_num\n\nassert find_star_num(3) == 37\n"}
{"task_id": "Mbpp/269", "completion": "\ndef ascii_value(char):\n    return ord(char)\n"}
{"task_id": "Mbpp/270", "completion": "\ndef sum_even_and_even_index(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 0)\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n"}
{"task_id": "Mbpp/271", "completion": "\ndef even_Power_Sum(n):\n    return sum([i**5 for i in range(1, n*2, 2)])\n\nassert even_Power_Sum(2) == 1056\n"}
{"task_id": "Mbpp/272", "completion": "\ndef rear_extract(lst):\n    return [tup[-1] for tup in lst]\n"}
{"task_id": "Mbpp/273", "completion": "\ndef substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))\n"}
{"task_id": "Mbpp/274", "completion": "\ndef even_binomial_Coeff_Sum(n):\n    import math\n    # Calculate binomial coefficients\n    coefficients = [math.comb(n, k) for k in range(n+1)]\n    # Filter even index coefficients and sum them\n    even_index_sum = sum(coefficients[i] for i in range(0, len(coefficients), 2))\n    return even_index_sum\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8\n"}
{"task_id": "Mbpp/276", "completion": "\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n"}
{"task_id": "Mbpp/277", "completion": "\ndef dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n"}
{"task_id": "Mbpp/278", "completion": "\ndef count_first_elements(tup):\n    count = 0\n    for elem in tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n"}
{"task_id": "Mbpp/279", "completion": "\ndef is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is a figurate number that can be represented in the form 3k(5k-2)/2, where k is a positive integer.\n    \"\"\"\n    decagonal_num = (3 * n * (5 * n - 2)) // 2\n    return decagonal_num\n\n# Test the function\nassert is_num_decagonal(3) == 27\n"}
{"task_id": "Mbpp/280", "completion": "\ndef sequential_search(arr, element):\n    try:\n        index = arr.index(element)\n        return (True, index)\n    except ValueError:\n        return (False, -1)\n"}
{"task_id": "Mbpp/281", "completion": "\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n\nassert all_unique([1,2,3]) == True\n"}
{"task_id": "Mbpp/282", "completion": "\ndef sub_list(list1, list2):\n    if len(list1)!= len(list2):\n        return \"Error: Lists are not of the same length\"\n    else:\n        return [a - b for a, b in zip(list1, list2)]\n\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n"}
{"task_id": "Mbpp/283", "completion": "\ndef validate(n):\n    # Convert the integer to a string to easily access each digit\n    n_str = str(n)\n    \n    # Create a dictionary to store the frequency of each digit\n    freq_dict = {}\n    \n    # Iterate over each digit in the string representation of the integer\n    for digit in n_str:\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[digit] = 1\n    \n    # Iterate over the frequency dictionary and check if any frequency is greater than the digit itself\n    for freq in freq_dict.values():\n        if freq > int(freq_dict.key):\n            return False\n    \n    # If no such frequency is found, return True\n    return True\n"}
{"task_id": "Mbpp/284", "completion": "\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n"}
{"task_id": "Mbpp/285", "completion": "\ndef text_match_two_three(string):\n    return string.count(\"ab\") >= 2 and string.count(\"ab\") <= 3\n\n# Test the function\nassert text_match_two_three(\"ac\")==(False)\n"}
{"task_id": "Mbpp/286", "completion": "\ndef max_sub_array_sum_repeated(arr, k, n):\n    modified_arr = arr * k  # Repeat the given array k times\n    max_sum = float('-inf')  # Initialize max_sum as negative infinity\n    prefix_sum = [0] * (len(modified_arr) + 1)  # Initialize prefix_sum array with 0\n\n    # Calculate prefix sum\n    for i in range(len(modified_arr)):\n        prefix_sum[i + 1] = prefix_sum[i] + modified_arr[i]\n\n    # Find the maximum subarray sum\n    for i in range(len(prefix_sum) - n):\n        curr_sum = prefix_sum[i + n] - prefix_sum[i]\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n"}
{"task_id": "Mbpp/287", "completion": "\ndef square_Sum(n):\n    return sum([i**2 for i in range(1, n+1, 2)])\n\nassert square_Sum(2) == 20\n"}
{"task_id": "Mbpp/290", "completion": "\ndef max_length(lst):\n    max_len = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)\n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n"}
{"task_id": "Mbpp/292", "completion": "\ndef find(dividend, divisor):\n    return int(dividend / divisor)\n\nassert find(10,3) == 3\n"}
{"task_id": "Mbpp/293", "completion": "\ndef otherside_rightangle(side1, side2):\n    # calculate the length of the hypotenuse using Pythagorean theorem\n    hypotenuse = ((side1 ** 2) + (side2 ** 2)) ** 0.5\n    # calculate the length of the third side\n    otherside = hypotenuse - abs(side1 - side2)\n    return round(otherside, 15)\n"}
{"task_id": "Mbpp/294", "completion": "\ndef max_val(lst):\n    max_num = None\n    for i in lst:\n        if isinstance(i, int) or isinstance(i, float):\n            if max_num is None or i > max_num:\n                max_num = i\n    return max_num\n\nassert max_val(['Python', 3, 2, 4, 5,'version'])==5\n"}
{"task_id": "Mbpp/295", "completion": "\ndef sum_div(n):\n    sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum += i\n            if i!= n // i:\n                sum += n // i\n    return sum\n\nassert sum_div(8) == 7\n"}
{"task_id": "Mbpp/296", "completion": "\ndef get_Inv_Count(arr):\n    def merge_count(left, right):\n        merge_count.count += len(left) * len(right)\n        return sorted(left + right, key=lambda x: (x, -1))\n\n    inv_count = 0\n    arr = merge_count(arr, [])\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            inv_count += 1\n    return inv_count\n\nassert get_Inv_Count([1,20,6,4,5]) == 5\n"}
{"task_id": "Mbpp/297", "completion": "\ndef flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n"}
{"task_id": "Mbpp/299", "completion": "\ndef max_aggregate(lst):\n    max_score = 0\n    max_name = ''\n    for name, score in lst:\n        if score > max_score:\n            max_score = score\n            max_name = name\n        elif score == max_score:\n            max_name = ', '.join([max_name, name])\n    return (max_name, max_score)\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n"}
{"task_id": "Mbpp/300", "completion": "\nimport math\n\ndef count_binary_seq(n):\n    # Initialize the count to 0\n    count = 0\n    \n    # Iterate over all possible values for the first n bits\n    for i in range(2**n):\n        # Convert the integer to binary and remove the '0b' prefix\n        first_n_bits = bin(i)[2:].zfill(n)\n        \n        # Calculate the sum of the first n bits\n        sum_first_n_bits = sum(int(bit) for bit in first_n_bits)\n        \n        # Calculate the complementary bits for the last n bits\n        last_n_bits = ''.join('1' if bit == '0' else '0' for bit in first_n_bits[:n])\n        \n        # Calculate the sum of the last n bits\n        sum_last_n_bits = sum(int(bit) for bit in last_n_bits)\n        \n        # If the sum of the first n bits is equal to the sum of the last n bits,\n        # increment the count\n        if sum_first_n_bits == sum_last_n_bits:\n            count += 1\n    \n    # Return the count\n    return count\n"}
{"task_id": "Mbpp/301", "completion": "\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"}
{"task_id": "Mbpp/305", "completion": "\ndef start_withp(lst):\n    for word in lst:\n        if word.startswith('p'):\n            return (word.split()[0], word.split()[1])\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n"}
{"task_id": "Mbpp/306", "completion": "\ndef max_sum_increasing_subseq(arr, n, k, i):\n    prefix_sum = [0] * (n + 1)\n    for j in range(1, n + 1):\n        prefix_sum[j] = prefix_sum[j - 1] + arr[j - 1]\n    \n    dp = [0] * (n + 1)\n    for j in range(1, n + 1):\n        dp[j] = max(dp[j - 1], prefix_sum[j] - (dp[max(0, j - k)] if j > k else 0))\n    \n    return dp[n - 1]\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n"}
{"task_id": "Mbpp/308", "completion": "\ndef large_product(list1, list2, n):\n    list1.sort()\n    list2.sort()\n    \n    result = []\n    for i in range(n):\n        result.append(list1[i] * list2[i])\n    \n    return result\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n"}
{"task_id": "Mbpp/309", "completion": "\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n"}
{"task_id": "Mbpp/310", "completion": "\ndef string_to_tuple(s):\n    return tuple(s)\n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n"}
{"task_id": "Mbpp/311", "completion": "\ndef set_left_most_unset_bit(n):\n    return n | (1 << (n.bit_length() - 1))\n"}
{"task_id": "Mbpp/312", "completion": "\nimport math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Function to calculate the volume of a cone.\n\n    Parameters:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: volume of the cone\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h\n\n# Test the function\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n"}
{"task_id": "Mbpp/388", "completion": "\ndef highest_Power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n\nassert highest_Power_of_2(10) == 8\n"}
{"task_id": "Mbpp/389", "completion": "\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_numbers = [2, 1]\n        for i in range(2, n+1):\n            lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2])\n        return lucas_numbers[n]\n"}
{"task_id": "Mbpp/390", "completion": "\ndef add_string(lst, string_format):\n    return [string_format.format(i) for i in lst]\n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n"}
{"task_id": "Mbpp/391", "completion": "\ndef convert_list_dictionary(keys, values, values2):\n    result = []\n    for i in range(len(keys)):\n        inner_dict = {keys[i]: values[i]}\n        if i < len(values2):\n            inner_dict.update({values2[i]: values[i]})\n        result.append(inner_dict)\n    return result\n\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n"}
{"task_id": "Mbpp/392", "completion": "\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n < 1:\n        return 0\n    else:\n        f_n_2 = get_max_sum(n // 2)\n        f_n_3 = get_max_sum(n // 3)\n        f_n_4 = get_max_sum(n // 4)\n        f_n_5 = get_max_sum(n // 5)\n        return max(f_n_2 + f_n_3 + f_n_4 + f_n_5, n)\n\nassert get_max_sum(60) == 106\n"}
{"task_id": "Mbpp/394", "completion": "\ndef check_distinct(tup):\n    return len(tup)!= len(set(tup))\n"}
{"task_id": "Mbpp/395", "completion": "\ndef first_non_repeating_character(string):\n    char_count = {}\n    \n    # Count the occurrences of each character\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeated character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"}
{"task_id": "Mbpp/396", "completion": "\ndef check_char(string):\n    if len(string) < 2:\n        return \"Invalid\"\n    elif string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n"}
{"task_id": "Mbpp/397", "completion": "\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n\nassert median_numbers(25,55,65)==55.0\n"}
{"task_id": "Mbpp/398", "completion": "\ndef sum_of_digits(lst):\n    return sum(sum(int(digit) for digit in str(num)) for num in lst)\n\nassert sum_of_digits([10,2,56])==14\n"}
{"task_id": "Mbpp/400", "completion": "\ndef extract_freq(lst):\n    return len(set(map(tuple, lst)))\n\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n"}
{"task_id": "Mbpp/404", "completion": "\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "Mbpp/405", "completion": "\ndef check_tuplex(tup, element):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n    \"\"\"\n    return element in tup\n"}
{"task_id": "Mbpp/406", "completion": "\ndef find_Parity(num):\n    return num % 2!= 0\n\nassert find_Parity(12) == False\n"}
{"task_id": "Mbpp/407", "completion": "\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Check if the sorted digits form a bigger number than the original number\n    if int(''.join(map(str, digits))) <= n:\n        return -1  # Return -1 if the sorted digits do not form a bigger number\n    \n    # Return the rearranged digits as a number\n    return int(''.join(map(str, digits)))\n\n# Test the function\nassert rearrange_bigger(12) == 21\n"}
{"task_id": "Mbpp/409", "completion": "\ndef min_product_tuple(lst):\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n"}
{"task_id": "Mbpp/410", "completion": "\ndef min_val(lst):\n    min_val = None\n    for i in lst:\n        if isinstance(i, int):\n            if min_val is None or i < min_val:\n                min_val = i\n    return min_val\n\nassert min_val(['Python', 3, 2, 4, 5,'version'])==2\n"}
{"task_id": "Mbpp/412", "completion": "\ndef remove_odd(lst):\n    return [num for num in lst if num % 2 == 0]\n\nassert remove_odd([1,2,3]) == [2]\n"}
{"task_id": "Mbpp/413", "completion": "\ndef extract_nth_element(lst, n):\n    return [t[n] for t in lst]\n\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n"}
{"task_id": "Mbpp/414", "completion": "\ndef overlapping(seq1, seq2):\n    return any(elem in seq2 for elem in seq1)\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n"}
{"task_id": "Mbpp/415", "completion": "\ndef max_Product(arr):\n    max_product = float('-inf')\n    first_max = second_max = None\n    \n    for num in arr:\n        if num > max_product:\n            second_max = first_max\n            first_max = num\n        elif num > second_max:\n            second_max = num\n            \n    return (first_max, second_max) if first_max!= None and second_max!= None else (None, None)\n\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n"}
{"task_id": "Mbpp/418", "completion": "\ndef Find_Max(lst):\n    max_len = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n"}
{"task_id": "Mbpp/419", "completion": "\ndef round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n"}
{"task_id": "Mbpp/420", "completion": "\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum\n\nassert cube_Sum(2) == 72\n"}
{"task_id": "Mbpp/421", "completion": "\ndef concatenate_tuple(tup):\n    return '-'.join(tup)\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\n"}
{"task_id": "Mbpp/422", "completion": "\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n*1.0)\n\nassert find_Average_Of_Cube(2) == 4.5\n"}
{"task_id": "Mbpp/424", "completion": "\ndef extract_rear(input_tuple):\n    return [s[-1] for s in input_tuple]\n"}
{"task_id": "Mbpp/425", "completion": "\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n"}
{"task_id": "Mbpp/426", "completion": "\ndef filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 == 1]\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n"}
{"task_id": "Mbpp/427", "completion": "\ndef change_date_format(date_str):\n    # Split the string into year, month, and day\n    year, month, day = date_str.split('-')\n    \n    # Return the day, month, and year in the desired format\n    return f\"{day}-{month}-{year}\"\n\n# Test the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n"}
{"task_id": "Mbpp/428", "completion": "\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n"}
{"task_id": "Mbpp/429", "completion": "\ndef and_tuples(t1, t2):\n    result = ()\n    for a, b in zip(t1, t2):\n        if a == b:\n            result += (a,)\n        else:\n            result += (a & b,)\n    return result\n\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n"}
{"task_id": "Mbpp/430", "completion": "\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Function to find the directrix of a parabola.\n    The directrix of a parabola is the line that cuts the parabola into two equal parts.\n    It can be found by solving the quadratic equation derived from the parabola's equation.\n    The equation of a parabola is y = ax^2 + bx + c.\n    The directrix is the line that satisfies the equation: 4ay = b^2 - 4ac.\n    \"\"\"\n    # Check if the parabola is a degenerate case (a = 0)\n    if a == 0:\n        raise ValueError(\"The parabola is a degenerate case. a cannot be zero.\")\n    \n    # Calculate the directrix's slope (4a)\n    directrix_slope = 4 * a\n    \n    # Calculate the directrix's y-intercept (b^2 - 4ac)\n    directrix_y_intercept = (b ** 2) - (4 * a * c)\n    \n    return directrix_slope, directrix_y_intercept\n\n# Test the function with the provided assertion\nassert parabola_directrix(5,3,2)==(-198, 0)\n"}
{"task_id": "Mbpp/431", "completion": "\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n"}
{"task_id": "Mbpp/432", "completion": "\ndef median_trapezium(a, b, c):\n    sides = sorted([a, b, c])\n    median = sides[1]\n    return median\n\nassert median_trapezium(15,25,35)==20\n"}
{"task_id": "Mbpp/433", "completion": "\ndef check_greater(arr, num):\n    return all(x > num for x in arr)\n"}
{"task_id": "Mbpp/435", "completion": "\ndef last_Digit(n):\n    return n % 10\n\nassert last_Digit(123) == 3\n"}
{"task_id": "Mbpp/436", "completion": "\ndef neg_nos(lst):\n    return [i for i in lst if i < 0]\n"}
{"task_id": "Mbpp/437", "completion": "\ndef remove_odd(s):\n    return ''.join([c for c in s if ord(c) % 2 == 0])\n\nassert remove_odd(\"python\")==(\"yhn\")\n"}
{"task_id": "Mbpp/438", "completion": "\ndef count_bidirectional(lst):\n    seen = set()\n    count = 0\n    for t in lst:\n        if t[::-1] in seen:\n            count += 1\n        seen.add(t)\n    return count\n\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\n"}
{"task_id": "Mbpp/439", "completion": "\ndef multiple_to_single(lst):\n    return int(''.join(str(i) for i in lst))\n\nassert multiple_to_single([11, 33, 50])==113350\n"}
{"task_id": "Mbpp/440", "completion": "\ndef find_adverb_position(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Iterate over the words to find the adverb\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.lower() in ['absolutely', 'amazingly', 'completely', 'entirely', 'perfectly','simply']:\n            # Return the position of the adverb, the length of the adverb and the adverb itself\n            return (i, len(word), word)\n    \n    # If no adverb is found, return None\n    return None\n"}
{"task_id": "Mbpp/441", "completion": "\ndef surfacearea_cube(side_length):\n    \"\"\"\n    This function calculates the surface area of a cube of a given size.\n    \n    Parameters:\n    side_length (int or float): The length of one side of the cube.\n    \n    Returns:\n    int or float: The surface area of the cube.\n    \"\"\"\n    \n    # Calculate the surface area\n    surface_area = 6 * (side_length ** 2)\n    \n    return surface_area\n\n# Test the function\nassert surfacearea_cube(5) == 150\n"}
{"task_id": "Mbpp/442", "completion": "\ndef positive_count(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n"}
{"task_id": "Mbpp/445", "completion": "\ndef index_multiplication(t1, t2):\n    # Ensure both inputs are tuples\n    assert isinstance(t1, tuple) and isinstance(t2, tuple)\n    \n    # Ensure both tuples have the same length\n    assert len(t1) == len(t2)\n    \n    # Perform element-wise multiplication\n    result = tuple(x * y for x, y in zip(t1, t2))\n    \n    return result\n\n# Test the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n"}
{"task_id": "Mbpp/446", "completion": "\ndef count_Occurrence(tup, lst):\n    count_dict = {i: 0 for i in lst}\n    for element in tup:\n        if element in count_dict:\n            count_dict[element] += 1\n    return sum(count_dict.values())\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3\n"}
{"task_id": "Mbpp/447", "completion": "\ndef cube_nums(lst):\n    return [i**3 for i in lst]\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n"}
{"task_id": "Mbpp/448", "completion": "\ndef cal_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return (n * (n + 1) * (2 * n + 1)) // 6 + cal_sum(n - 1)\n\nassert cal_sum(9) == 49\n"}
{"task_id": "Mbpp/450", "completion": "\ndef extract_string(input_list, size):\n    return input_list[:size]\n"}
{"task_id": "Mbpp/451", "completion": "\ndef remove_whitespaces(input_string):\n    return input_string.replace(' ', '')\n"}
{"task_id": "Mbpp/453", "completion": "\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    even_factors = [factor for factor in factors if factor % 2 == 0]\n    return sum(even_factors)\n\nassert sumofFactors(18) == 26\n"}
{"task_id": "Mbpp/454", "completion": "\ndef text_match_wordz(word):\n    \"\"\"\n    This function checks if a word contains the letter 'z'.\n    \"\"\"\n    return 'z' in word\n\n# Test the function\nassert text_match_wordz(\"pythonz.\")==True\n"}
{"task_id": "Mbpp/455", "completion": "\ndef check_monthnumb_number(month_number):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_monthnumb_number(5) == True\n"}
{"task_id": "Mbpp/456", "completion": "\ndef reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]\n"}
{"task_id": "Mbpp/457", "completion": "\ndef Find_Min(lst):\n    if not lst:\n        return []\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "Mbpp/458", "completion": "\ndef rectangle_area(length, width):\n    \"\"\"\n    This function calculates the area of a rectangle.\n    :param length: The length of the rectangle.\n    :param width: The width of the rectangle.\n    :return: The area of the rectangle.\n    \"\"\"\n    return length * width\n\n# Test the function\nassert rectangle_area(10,20)==200\n"}
{"task_id": "Mbpp/459", "completion": "\ndef remove_uppercase(s):\n    return ''.join(c for c in s if c.islower() or c.isdigit() or c =='')\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n"}
{"task_id": "Mbpp/460", "completion": "\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n"}
{"task_id": "Mbpp/461", "completion": "\ndef upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n\nassert upper_ctr('PYthon') == 1\n"}
{"task_id": "Mbpp/462", "completion": "\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in itertools.combinations(lst, i):\n            result.append(list(combo))\n    return result\n\nassert combinations_list(['orange','red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green','red'], ['green','red', 'orange'], ['blue'], ['blue', 'orange'], ['blue','red'], ['blue','red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green','red'], ['blue', 'green','red', 'orange']]\n"}
{"task_id": "Mbpp/463", "completion": "\ndef max_subarray_product(arr):\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n\n    for num in arr[1:]:\n        current_max = max(num, current_max * num, current_min * num)\n        current_min = min(num, current_max * num, current_min * num)\n        max_product = max(max_product, current_max)\n\n    return max_product\n"}
{"task_id": "Mbpp/465", "completion": "\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n"}
{"task_id": "Mbpp/468", "completion": "\ndef max_product(arr):\n    if not arr:\n        return 0\n\n    max_prod = min_prod = result = arr[0]\n    for num in arr[1:]:\n        if num > max_prod:\n            max_prod *= num\n            max_prod_index = num\n        elif num > min_prod:\n            min_prod *= num\n            min_prod_index = num\n        else:\n            max_prod = max(max_prod / max_prod_index, min_prod / min_prod_index) * num\n            min_prod = min(max_prod / max_prod_index, min_prod / min_prod_index) * num\n            max_prod_index = max_prod if max_prod > max_prod_index else max_prod_index\n            min_prod_index = min_prod if min_prod > min_prod_index else min_prod_index\n\n        result = max(result, max_prod)\n\n    return result\n"}
{"task_id": "Mbpp/470", "completion": "\ndef add_pairwise(tup):\n    return tuple(tup[i] + tup[i-1] for i in range(1, len(tup)))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n"}
{"task_id": "Mbpp/471", "completion": "\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product\n\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) == 9\n"}
{"task_id": "Mbpp/472", "completion": "\ndef check_Consecutive(lst):\n    return set(lst) == {i for i in range(min(lst), max(lst)+1)}\n\nassert check_Consecutive([1,2,3,4,5]) == True\n"}
{"task_id": "Mbpp/473", "completion": "\ndef tuple_intersection(tuple_list1, tuple_list2):\n    # Convert the lists to sets of frozensets\n    set1 = set(frozenset(t) for t in tuple_list1)\n    set2 = set(frozenset(t) for t in tuple_list2)\n\n    # Find the intersection\n    intersection = set1 & set2\n\n    # Convert the frozensets back to tuples\n    return {tuple(sorted(t)) for t in intersection}\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n"}
{"task_id": "Mbpp/474", "completion": "\ndef replace_char(string, char_to_replace, replace_with):\n    return string.replace(char_to_replace, replace_with)\n\n# Test the function\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n"}
{"task_id": "Mbpp/475", "completion": "\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1])\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n"}
{"task_id": "Mbpp/476", "completion": "\ndef big_sum(arr):\n    return max(arr) + min(arr)\n"}
{"task_id": "Mbpp/477", "completion": "\ndef is_lower(s):\n    return s.lower()\n\nassert is_lower(\"InValid\") == \"invalid\"\n"}
{"task_id": "Mbpp/478", "completion": "\ndef remove_lowercase(s):\n    return ''.join([i for i in s if i.isupper() or i.isnumeric()])\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n"}
{"task_id": "Mbpp/479", "completion": "\ndef first_Digit(num):\n    while num >= 10:\n        num //= 10\n    return num\n\nassert first_Digit(123) == 1\n"}
{"task_id": "Mbpp/554", "completion": "\ndef split_odd_numbers(lst):\n    return [num for num in lst if num % 2!= 0]\n\nassert split_odd_numbers([1,2,3,4,5,6]) == [1,3,5]\n"}
{"task_id": "Mbpp/555", "completion": "\ndef difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers\n\nassert difference(3) == 30\n"}
{"task_id": "Mbpp/556", "completion": "\ndef find_Odd_Pair(arr, n):\n    xor_count = 0\n    xor_dict = {}\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_val = arr[i] ^ arr[j]\n            if xor_val % 2!= 0:\n                xor_count += 1\n                if xor_val in xor_dict:\n                    xor_dict[xor_val] += 1\n                else:\n                    xor_dict[xor_val] = 1\n    return xor_count\n\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n"}
{"task_id": "Mbpp/557", "completion": "\ndef toggle_string(s):\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\nassert toggle_string(\"Python\")==(\"pYTHON\")\n"}
{"task_id": "Mbpp/558", "completion": "\ndef digit_distance_nums(num1, num2):\n    # Convert the numbers to strings to easily access individual digits\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Initialize a variable to store the sum of digit differences\n    digit_diff_sum = 0\n\n    # Loop through each digit in the numbers\n    for i in range(max(len(num1_str), len(num2_str))):\n        # Get the corresponding digits from the numbers, or assume 0 if the index is out of range\n        digit1 = int(num1_str[i]) if i < len(num1_str) else 0\n        digit2 = int(num2_str[i]) if i < len(num2_str) else 0\n\n        # Calculate the absolute difference between the digits and add it to the sum\n        digit_diff_sum += abs(digit1 - digit2)\n\n    return digit_diff_sum\n"}
{"task_id": "Mbpp/559", "completion": "\ndef max_sub_array_sum(lst, target):\n    max_sum = 0\n    current_sum = 0\n    start = 0\n    end = 0\n    temp_start = 0\n\n    for i in range(len(lst)):\n        current_sum += lst[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = temp_start\n            end = i\n\n        if current_sum < 0:\n            current_sum = 0\n            temp_start = i + 1\n\n    return max_sum\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n"}
{"task_id": "Mbpp/560", "completion": "\ndef union_elements(tuple1, tuple2):\n    # Convert tuples to sets to remove duplicates and enable set operations\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find the union of the two sets\n    union = set1.union(set2)\n    \n    # Convert the union set back to a tuple and sort it\n    sorted_union = sorted(tuple(union))\n    \n    return sorted_union\n\n# Test the function with the provided assertion\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n"}
{"task_id": "Mbpp/562", "completion": "\ndef Find_Max_Length(input_list):\n    max_length = 0\n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"}
{"task_id": "Mbpp/563", "completion": "\ndef extract_values(input_string):\n    values = []\n    start = input_string.find('\"')\n    while start!= -1:\n        end = input_string.find('\"', start + 1)\n        if end == -1:\n            break\n        value = input_string[start + 1: end]\n        values.append(value)\n        start = input_string.find('\"', end + 1)\n    return values\n"}
{"task_id": "Mbpp/564", "completion": "\ndef count_Pairs(lst, num):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i]!= lst[j]:\n                count += 1\n    return count\n\nassert count_Pairs([1,2,1],3) == 2\n"}
{"task_id": "Mbpp/565", "completion": "\ndef split(string):\n    return list(string)\n\nassert split('python') == ['p','y','t','h','o','n']\n"}
{"task_id": "Mbpp/566", "completion": "\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n\nassert sum_digits(345)==12\n"}
{"task_id": "Mbpp/567", "completion": "\ndef issort_list(lst):\n    return lst == sorted(lst)\n"}
{"task_id": "Mbpp/568", "completion": "\ndef empty_list(n):\n    return [{} for _ in range(n)]\n"}
{"task_id": "Mbpp/569", "completion": "\ndef sort_sublists(lists):\n    return [sorted(sublist) for sublist in lists]\n"}
{"task_id": "Mbpp/572", "completion": "\ndef remove_duplicates(lists):\n    \"\"\"\n    This function takes a list of lists and returns a list of lists with duplicate numbers removed.\n    \"\"\"\n    unique_lists = []\n    for lst in lists:\n        unique_lst = list(set(lst))\n        unique_lists.append(unique_lst)\n    return unique_lists\n\ndef two_unique_nums(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a list of unique numbers.\n    \"\"\"\n    return list(set(lst))\n\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n"}
{"task_id": "Mbpp/573", "completion": "\ndef unique_product(lst):\n    unique_nums = set(lst)  # Get unique numbers in the list\n    product = 1  # Initialize product to 1\n    for num in unique_nums:\n        product *= num  # Multiply product by each unique number\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 7200000\n"}
{"task_id": "Mbpp/574", "completion": "\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    Function to calculate the surface area of a cylinder.\n    \n    Parameters:\n    radius (float): radius of the cylinder\n    height (float): height of the cylinder\n    \n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n    surface_area = 2 * 3.14 * radius * (radius + height)\n    return surface_area\n\n# Test the function\nassert surfacearea_cylinder(10,5)==942.45\n"}
{"task_id": "Mbpp/576", "completion": "\ndef is_Sub_Array(arr, sub_arr):\n    if sub_arr == []:\n        return True\n    if len(sub_arr) > len(arr):\n        return False\n    for i in range(len(arr)):\n        if arr[i:i+len(sub_arr)] == sub_arr:\n            return True\n    return False\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n"}
{"task_id": "Mbpp/577", "completion": "\ndef last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial = (factorial * i) % 10\n    return factorial\n\n# Test the function\nassert last_Digit_Factorial(4) == 4\n"}
{"task_id": "Mbpp/578", "completion": "\ndef interleave_lists(list1, list2, list3):\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]\n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,7],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n"}
{"task_id": "Mbpp/579", "completion": "\ndef find_dissimilar(t1, t2):\n    set1 = set(t1)\n    set2 = set(t2)\n    return tuple(set1.symmetric_difference(set2))\n\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n"}
{"task_id": "Mbpp/580", "completion": "\ndef extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(e) if isinstance(e, tuple) else e for e in t if e % 2 == 0)\n    else:\n        return t\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n"}
{"task_id": "Mbpp/581", "completion": "\ndef surface_Area(base, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid.\n    \"\"\"\n    return base * height + 4 * (base ** 2)\n\n# Test the function\nassert surface_Area(3,4) == 33\n"}
{"task_id": "Mbpp/582", "completion": "\ndef is_dict_empty(input_dict):\n    return not bool(input_dict)\n"}
{"task_id": "Mbpp/583", "completion": "\ndef catalan_number(n):\n    if n <= 1:\n        return 1\n    num = 1\n    den = 1\n    for i in range(2, n+1):\n        num *= i\n        den *= (i-1)\n    return num//den\n\nassert catalan_number(10)==16796\n"}
{"task_id": "Mbpp/585", "completion": "\ndef expensive_items(data, n):\n    sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n    return sorted_data[:n]\n"}
{"task_id": "Mbpp/586", "completion": "\ndef split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n"}
{"task_id": "Mbpp/587", "completion": "\ndef list_tuple(lst):\n    return tuple(lst)\n\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n"}
{"task_id": "Mbpp/588", "completion": "\ndef big_diff(lst):\n    return max(lst) - min(lst)\n\nassert big_diff([1,2,3,4]) == 3\n"}
{"task_id": "Mbpp/589", "completion": "\ndef perfect_squares(start, end):\n    \"\"\"\n    This function returns a list of perfect squares between two given numbers.\n    \"\"\"\n    # Initialize an empty list to store perfect squares\n    squares = []\n    \n    # Iterate over the range from start to end (inclusive)\n    for num in range(start, end + 1):\n        # Calculate the square root of the number\n        root = num ** 0.5\n        # If the square root is an integer, it is a perfect square\n        if root.is_integer():\n            squares.append(num)\n    \n    # Return the list of perfect squares\n    return squares\n"}
{"task_id": "Mbpp/590", "completion": "\ndef polar_rect(r, theta):\n    x = r * cos(theta)\n    y = r * sin(theta)\n    return (x, y)\n"}
{"task_id": "Mbpp/591", "completion": "\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n"}
{"task_id": "Mbpp/592", "completion": "\ndef sum_of_product(n):\n    from math import comb\n    return sum(comb(n, k) * comb(n, k+1) for k in range(n))\n\nassert sum_of_product(3) == 15\n"}
{"task_id": "Mbpp/593", "completion": "\ndef removezero_ip(ip):\n    # Split the ip address into segments\n    segments = ip.split('.')\n    # Remove leading zeroes from each segment\n    segments = [segment.lstrip('0') for segment in segments]\n    # Join the segments back into an ip address\n    return '.'.join(segments)\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n"}
{"task_id": "Mbpp/594", "completion": "\ndef diff_even_odd(lst):\n    even_num = [x for x in lst if x % 2 == 0]\n    odd_num = [x for x in lst if x % 2!= 0]\n    if even_num:\n        return even_num[0] - odd_num[0]\n    else:\n        return 0\n\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n"}
{"task_id": "Mbpp/595", "completion": "\ndef min_Swaps(source, target):\n    source_list = list(source)\n    target_list = list(target)\n    source_len = len(source)\n    target_len = len(target)\n    \n    # Pad the shorter binary number with zeros at the beginning\n    if source_len < target_len:\n        source_list = ['0']*(target_len-source_len) + source_list\n    elif target_len < source_len:\n        target_list = ['0']*(source_len-target_len) + target_list\n    \n    count = 0\n    for i in range(source_len):\n        if source_list[i]!= target_list[i]:\n            count += 1\n            source_list[i] = target_list[i]\n    return count\n"}
{"task_id": "Mbpp/596", "completion": "\nimport sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n"}
{"task_id": "Mbpp/597", "completion": "\ndef find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    if k == 1:\n        return arr1[i] if i < len(arr1) else arr2[j]\n    else:\n        return arr1[i-1] if i < len(arr1) else arr2[j-1]\n\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n"}
{"task_id": "Mbpp/598", "completion": "\ndef armstrong_number(num):\n    # Convert the number to string\n    num_str = str(num)\n    length = len(num_str)\n    \n    # Calculate the sum of the cubes of each digit\n    sum_cubes = sum(int(digit)**length for digit in num_str)\n    \n    # Check if the sum of cubes is equal to the original number\n    return sum_cubes == num\n\n# Test the function\nassert armstrong_number(153)==True\n"}
{"task_id": "Mbpp/599", "completion": "\ndef sum_average(n):\n    sum = (n * (n + 1)) // 2\n    avg = sum / n\n    return (sum, avg)\n\nassert sum_average(10)==(55, 5.5)\n"}
{"task_id": "Mbpp/600", "completion": "\ndef is_Even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nassert is_Even(1) == False\n"}
{"task_id": "Mbpp/602", "completion": "\ndef first_repeated_char(string):\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"}
{"task_id": "Mbpp/603", "completion": "\ndef get_ludic(n):\n    ludic_nums = []\n    for i in range(1, n+1):\n        digits = [int(d) for d in str(i)]\n        if len(digits) == len(set(digits)):\n            ludic_nums.append(i)\n    return ludic_nums\n"}
{"task_id": "Mbpp/604", "completion": "\ndef reverse_words(s):\n    words = s.split(\" \")\n    return \" \".join(reversed(words))\n\nassert reverse_words(\"python program\")==(\"program python\")\n"}
{"task_id": "Mbpp/605", "completion": "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "Mbpp/606", "completion": "\nimport math\n\ndef radian_degree(degree):\n    return math.radians(degree)\n"}
{"task_id": "Mbpp/607", "completion": "\nimport re\n\ndef find_literals(text, pattern):\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return (text[start_index:end_index], start_index, end_index)\n    else:\n        return None\n\n# Test the function\nprint(find_literals('The quick brown fox jumps over the lazy dog.', 'fox'))\n"}
{"task_id": "Mbpp/608", "completion": "\ndef bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        return n * bell_Number(n-1) + bell_Number(n-2)\n\nassert bell_Number(2) == 2\n"}
{"task_id": "Mbpp/610", "completion": "\ndef remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n"}
{"task_id": "Mbpp/611", "completion": "\ndef max_of_nth(matrix, n):\n    return max(col[n] for row in matrix for col in row)\n\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n"}
{"task_id": "Mbpp/612", "completion": "\ndef merge(lst):\n    return [lst[i][0:1] for i in range(len(lst))], [lst[i][1:2] for i in range(len(lst))]\n\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a','m'], ['y', 'b', 'n']]\n"}
{"task_id": "Mbpp/614", "completion": "\ndef cummulative_sum(tuple_list):\n    cum_sum = 0\n    for tup in tuple_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n"}
{"task_id": "Mbpp/615", "completion": "\ndef average_tuple(tup):\n    return [sum(tup[i])/len(tup[i]) for i in range(len(tup))]\n\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n"}
{"task_id": "Mbpp/616", "completion": "\ndef tuple_modulo(t1, t2):\n    if len(t1)!= len(t2):\n        raise ValueError(\"Both tuples must have the same length\")\n    return tuple(x % y for x, y in zip(t1, t2))\n"}
{"task_id": "Mbpp/618", "completion": "\ndef div_list(list1, list2):\n    if len(list1)!= len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [i/j for i, j in zip(list1, list2)]\n\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n"}
{"task_id": "Mbpp/619", "completion": "\ndef move_num(s):\n    num_list = []\n    word_list = s.split()\n    for word in word_list:\n        if word.isdigit():\n            num_list.append(word)\n    for num in num_list:\n        s = s.replace(num, '')\n    s +=''.join(num_list)\n    return s\n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n"}
{"task_id": "Mbpp/620", "completion": "\ndef largest_subset(nums):\n    nums.sort(reverse=True)  # sort the list in descending order\n    dp = [1] * len(nums)  # initialize the dynamic programming array with all 1's\n    \n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1  # update the maximum length of subset ending at index i\n                \n    return max(dp)  # return the maximum length of subset\n\n# Test the function\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n"}
{"task_id": "Mbpp/622", "completion": "\ndef get_median(list1, list2, size):\n    # Merge the two sorted lists\n    merged_list = sorted(list1 + list2)\n    \n    # Calculate the median\n    if size % 2 == 0:\n        median = (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2\n    else:\n        median = merged_list[size // 2]\n    \n    return median\n"}
{"task_id": "Mbpp/623", "completion": "\ndef nth_nums(nums, n):\n    return [num ** n for num in nums]\n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"}
{"task_id": "Mbpp/624", "completion": "\ndef is_upper(string):\n    return string.upper()\n\nassert is_upper(\"person\") ==\"PERSON\"\n"}
{"task_id": "Mbpp/626", "completion": "\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        semi_circle_area = math.pi * radius**2\n        max_triangle_height = radius * math.sqrt(2) / 2\n        max_triangle_area = semi_circle_area * max_triangle_height / 2\n        return max_triangle_area\n\n# Test the function\nprint(triangle_area(1))  # Expected output: 0.4330127018922193\nprint(triangle_area(-1))  # Expected output: None\n"}
{"task_id": "Mbpp/628", "completion": "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n"}
{"task_id": "Mbpp/629", "completion": "\ndef find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nassert find_even_numbers([1,2,3,4,5]) == [2,4]\n"}
{"task_id": "Mbpp/630", "completion": "\ndef get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = [[x-1, y], [x-1, y+1], [x, y+1], [x+1, y], [x+1, y-1], [x, y-1]]\n    return adjacent_coords\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n"}
{"task_id": "Mbpp/631", "completion": "\ndef replace_spaces(string):\n    return string.replace(' ', '_').replace('_','')\n"}
{"task_id": "Mbpp/632", "completion": "\ndef move_zero(lst):\n    # Initialize two pointers, one for the current element and one for the next non-zero element\n    i, j = 0, 0\n\n    # Iterate over the list\n    while i < len(lst):\n        # If the current element is not zero, increment the non-zero pointer and swap the elements\n        if lst[i]!= 0:\n            lst[i], lst[j] = lst[j], lst[i]\n            j += 1\n        # Move to the next element\n        i += 1\n\n    # Fill the remaining elements with zeros\n    while j < len(lst):\n        lst[j] = 0\n        j += 1\n\n    return lst\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n"}
{"task_id": "Mbpp/633", "completion": "\ndef pair_xor_Sum(lst, num):\n    # XOR of all pairs\n    xor_sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            xor_sum += lst[i] ^ lst[j]\n    # Add the number itself\n    xor_sum += num\n    return xor_sum\n\n# Test the function\nassert pair_xor_Sum([5,9,7,6],4) == 47\n"}
{"task_id": "Mbpp/635", "completion": "\ndef heap_sort(lst):\n    def heapify(lst, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and lst[i] < lst[left]:\n            largest = left\n\n        if right < n and lst[largest] < lst[right]:\n            largest = right\n\n        if largest!= i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(lst, n, i)\n\n    for i in range(n - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n\n    return lst\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"task_id": "Mbpp/637", "completion": "\ndef noprofit_noloss(cost_price, selling_price):\n    \"\"\"\n    This function checks whether the given cost price and selling price forms a profit or loss.\n    \"\"\"\n    return (selling_price - cost_price) <= 0\n"}
{"task_id": "Mbpp/638", "completion": "\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v <= 4:\n        return round(13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16)\n    else:\n        return round(13.12 + 0.6215*t - 0.2843*v**0.5 + 0.3965*t*v**0.16)\n\n# Test the function\nassert wind_chill(120,35)==40\n"}
{"task_id": "Mbpp/639", "completion": "\ndef sum_length_names(names):\n    return sum(len(name) for name in names if name[0].isupper())\n\nsample_names = ['sally', 'Dylan','rebecca', 'Diana', 'Joanne', 'keith']\nassert sum_length_names(sample_names) == 16\n"}
{"task_id": "Mbpp/640", "completion": "\ndef remove_parenthesis(strings):\n    result = []\n    for string in strings:\n        start = string.find('(')\n        end = string.find(')')\n        if start!= -1 and end!= -1:\n            result.append(string[:start] + string[end+1:])\n        else:\n            result.append(string)\n    return result\n"}
{"task_id": "Mbpp/641", "completion": "\ndef is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula n*(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2\n\n# Test the function\nassert is_nonagonal(10) == 325\n"}
{"task_id": "Mbpp/643", "completion": "\ndef text_match_wordz_middle(s):\n    s = s.split()\n    for word in s:\n        if 'z' in word[1:-1]:\n            return True\n    return False\n\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n"}
{"task_id": "Mbpp/644", "completion": "\ndef reverse_Array_Upto_K(arr, k):\n    n = len(arr)\n    for i in range(k, n):\n        j = i\n        while j >= 0:\n            arr[j], arr[n-1-j] = arr[n-1-j], arr[j]\n            j -= 1\n    return arr\n"}
{"task_id": "Mbpp/720", "completion": "\ndef add_dict_to_tuple(tup, dct):\n    return tuple(list(tup) + [dct])\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n"}
{"task_id": "Mbpp/721", "completion": "\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0]*N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    \n    # Initialize the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        \n    # Initialize the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        \n    # Fill the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n            \n    # Calculate the average\n    total_cost = dp[N-1][N-1]\n    visited_cells = N*N\n    average = total_cost / visited_cells\n    \n    return average\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n"}
{"task_id": "Mbpp/722", "completion": "\ndef filter_data(data, min_height, min_weight):\n    return {name: values for name, values in data.items() if values[0] > min_height and values[1] > min_weight}\n\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n"}
{"task_id": "Mbpp/723", "completion": "\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n"}
{"task_id": "Mbpp/724", "completion": "\ndef power_base_sum(base, power):\n    result = base ** power\n    sum_digits = 0\n    while result > 0:\n        sum_digits += result % 10\n        result //= 10\n    return sum_digits\n\nassert power_base_sum(2,100)==115\n"}
{"task_id": "Mbpp/725", "completion": "\ndef extract_quotation(input_string):\n    result = []\n    start = input_string.find('\"')\n    while start!= -1:\n        end = input_string.find('\"', start + 1)\n        if end!= -1:\n            result.append(input_string[start + 1: end])\n            start = input_string.find('\"', end + 1)\n        else:\n            break\n    return result\n"}
{"task_id": "Mbpp/726", "completion": "\ndef multiply_elements(input_tuple):\n    # Check if the length of the tuple is at least 2\n    if len(input_tuple) < 2:\n        return ()\n    \n    # Calculate the product of each pair of consecutive elements\n    result = tuple(input_tuple[i] * input_tuple[i + 1] for i in range(len(input_tuple) - 1))\n    \n    return result\n"}
{"task_id": "Mbpp/728", "completion": "\ndef sum_list(list1, list2):\n    return [a+b for a, b in zip(list1, list2)]\n"}
{"task_id": "Mbpp/730", "completion": "\ndef consecutive_duplicates(lst):\n    new_lst = [lst[i] for i in range(len(lst)) if i == 0 or lst[i]!= lst[i-1]]\n    return new_lst\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n"}
{"task_id": "Mbpp/731", "completion": "\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\n\nassert lateralsurface_cone(5,12)==204.20352248333654\n"}
{"task_id": "Mbpp/732", "completion": "\ndef replace_specialchar(s):\n    for char in [',', '.','']:\n        s = s.replace(char, ':')\n    return s\n\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n"}
{"task_id": "Mbpp/733", "completion": "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # search in the left half for the first occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n"}
{"task_id": "Mbpp/734", "completion": "\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            ans += prod\n    return ans\n\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n"}
{"task_id": "Mbpp/735", "completion": "\ndef toggle_middle_bits(n):\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    \n    # If the number of bits is less than 3, return the number itself\n    if len(binary) < 3:\n        return n\n    \n    # Toggle the middle bits\n    for i in range(1, len(binary) - 1):\n        binary = binary[:i] + ('0' if binary[i] == '1' else '1') + binary[i+1:]\n    \n    # Convert the binary back to decimal\n    return int(binary, 2)\n\n# Test the function\nassert toggle_middle_bits(9) == 15\n"}
{"task_id": "Mbpp/736", "completion": "\ndef left_insertion(arr, val):\n    \"\"\"\n    Find the left insertion point for a specified value in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"}
{"task_id": "Mbpp/737", "completion": "\nimport re\n\ndef check_str(s):\n    pattern = r\"^[aeiouAEIOU]\"\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_str(\"annie\")  # This assertion should pass\n"}
{"task_id": "Mbpp/739", "completion": "\ndef find_Index(n):\n    # Calculate the index of the smallest triangular number with n digits\n    index = int((2 * 10 ** (n - 1)) / (n + 1))\n    return index\n\n# Test the function\nassert find_Index(2) == 4\n"}
{"task_id": "Mbpp/740", "completion": "\ndef tuple_to_dict(tup):\n    # Check if the length of the tuple is even\n    if len(tup) % 2!= 0:\n        raise ValueError(\"The length of the tuple must be even\")\n\n    # Create an empty dictionary\n    dict_out = {}\n\n    # Loop through the tuple in steps of 2\n    for i in range(0, len(tup), 2):\n        # Add the key-value pair to the dictionary\n        dict_out[tup[i]] = tup[i + 1]\n\n    return dict_out\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n"}
{"task_id": "Mbpp/741", "completion": "\ndef all_Characters_Same(string):\n    first_char = string[0]\n    return all([char == first_char for char in string])\n\nassert all_Characters_Same(\"python\") == False\n"}
{"task_id": "Mbpp/742", "completion": "\nimport math\n\ndef area_tetrahedron(edge_length):\n    \"\"\"\n    Calculate the area of a tetrahedron given the length of its edge.\n    \n    Parameters:\n    edge_length (float): The length of the edge of the tetrahedron.\n    \n    Returns:\n    float: The area of the tetrahedron.\n    \"\"\"\n    \n    # The area of a tetrahedron given the length of its edge is \n    # calculated using the formula: sqrt(2) * edge_length^2\n    return math.sqrt(2) * math.pow(edge_length, 2)\n"}
{"task_id": "Mbpp/743", "completion": "\ndef rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n"}
{"task_id": "Mbpp/744", "completion": "\ndef check_none(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False\n"}
{"task_id": "Mbpp/745", "completion": "\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"}
{"task_id": "Mbpp/746", "completion": "\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360) * math.pi * radius**2\n"}
{"task_id": "Mbpp/748", "completion": "\ndef capital_words_spaces(s):\n    return''.join(word for word in s.split() if word[0].isupper())\n\nassert capital_words_spaces(\"Python\") == 'Python'\n"}
{"task_id": "Mbpp/749", "completion": "\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))\n\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n"}
{"task_id": "Mbpp/750", "completion": "\ndef add_tuple(lst, tpl):\n    return lst + list(tpl)\n"}
{"task_id": "Mbpp/751", "completion": "\ndef check_min_heap(arr):\n    n = len(arr)\n    \n    # Start from the last non-leaf node and traverse up to the root node\n    for i in range(n//2 - 1, -1, -1):\n        # Check if the left child is smaller than the parent\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        \n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n    \n    return True\n\n# Test the function\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n"}
{"task_id": "Mbpp/752", "completion": "\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nassert jacobsthal_num(5) == 11\n"}
{"task_id": "Mbpp/753", "completion": "\ndef min_k(lst, k):\n    sorted_lst = sorted(lst, key=lambda x: x[1])\n    return sorted_lst[:k]\n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n"}
{"task_id": "Mbpp/754", "completion": "\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"}
{"task_id": "Mbpp/755", "completion": "\ndef second_smallest(lst):\n    # First, we remove any duplicates from the list\n    unique_lst = list(set(lst))\n    \n    # If the length of the unique list is less than 2, we return None\n    # because there is no second smallest number\n    if len(unique_lst) < 2:\n        return None\n    \n    # We sort the unique list in ascending order\n    unique_lst.sort()\n    \n    # The second smallest number is the second element in the sorted list\n    return unique_lst[1]\n"}
{"task_id": "Mbpp/757", "completion": "\ndef count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n"}
{"task_id": "Mbpp/758", "completion": "\ndef unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict\n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n"}
{"task_id": "Mbpp/759", "completion": "\ndef is_decimal(s):\n    try:\n        number = float(s)\n        if s.count('.') == 1:\n            # check if precision is 2\n            if len(s[s.index('.'):]) == 3:\n                return True\n            else:\n                return False\n        elif s.count('.') == 0:\n            # no decimal point, check if it's an integer\n            if s.isdigit():\n                return True\n        else:\n            return False\n    except ValueError:\n        return False\n"}
{"task_id": "Mbpp/760", "completion": "\ndef unique_Element(lst):\n    return len(set(lst)) == 1\n\nassert unique_Element([1,1,1]) == True\n"}
{"task_id": "Mbpp/762", "completion": "\ndef check_monthnumber_number(month_number):\n    \"\"\"\n    This function checks whether the given month number contains 30 days or not.\n    \"\"\"\n    thirty_days_months = [4, 6, 9, 11]\n    if month_number in thirty_days_months:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/763", "completion": "\ndef find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n"}
{"task_id": "Mbpp/764", "completion": "\ndef number_ctr(string):\n    return sum(c.isdigit() for c in string)\n\nassert number_ctr('program2bedone') == 1\n"}
{"task_id": "Mbpp/765", "completion": "\ndef is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n    A polite number is a positive integer that can be written as the sum of two or more consecutive non-zero natural numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2\n\nassert is_polite(7) == 11\n"}
{"task_id": "Mbpp/766", "completion": "\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n"}
{"task_id": "Mbpp/767", "completion": "\ndef get_pairs_count(numbers, target_sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                count += 1\n    return count\n\nassert get_pairs_count([1,1,1,1],2) == 6\n"}
{"task_id": "Mbpp/769", "completion": "\ndef Diff(list1, list2):\n    return [value for value in list1 + list2 if value not in list2 if value not in list1]\n\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n"}
{"task_id": "Mbpp/770", "completion": "\ndef odd_num_sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum\n\nassert odd_num_sum(2) == 82\n"}
{"task_id": "Mbpp/771", "completion": "\ndef check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char]!= stack.pop():\n                return False\n    return stack == []\n\nassert check_expression(\"{()}[{}]\") == True\n"}
{"task_id": "Mbpp/772", "completion": "\ndef remove_length(s, k):\n    words = s.split()\n    new_words = [word for word in words if len(word)!= k]\n    return''.join(new_words)\n\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n"}
{"task_id": "Mbpp/773", "completion": "\ndef occurance_substring(string, substring):\n    index = string.find(substring)\n    if index == -1:\n        return None\n    else:\n        return (substring, index, index + len(substring))\n\n# Test the function\nprint(occurance_substring('python programming, python language','python'))\n"}
{"task_id": "Mbpp/775", "completion": "\ndef odd_position(lst):\n    count = 0\n    for i in range(len(lst)):\n        if i % 2!= 0:  # Check if the index is odd\n            if lst[i] % 2 == 0:  # Check if the number at the odd index is even\n                return False\n            else:\n                count += 1\n    return count % 2 == 1\n\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n"}
{"task_id": "Mbpp/777", "completion": "\ndef find_sum(lst):\n    # Create a set to store unique elements\n    unique_set = set()\n    # Create a list to store non-repeated elements\n    non_repeated_list = []\n    # Iterate over the given list\n    for i in lst:\n        # If the element is not in the set, add it to the set and list\n        if i not in unique_set:\n            unique_set.add(i)\n            non_repeated_list.append(i)\n    # Return the sum of non-repeated elements\n    return sum(non_repeated_list)\n\n# Test the function\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n"}
{"task_id": "Mbpp/778", "completion": "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            sublist.append(lst[i])\n        else:\n            result.append(sublist)\n            sublist = [lst[i]]\n    \n    result.append(sublist)\n    return result\n"}
{"task_id": "Mbpp/780", "completion": "\nfrom itertools import combinations\n\ndef find_combinations(tuples_list):\n    sum_set = set()\n    for r in range(1, len(tuples_list) + 1):\n        for combination_tuple in combinations(tuples_list, r):\n            sum_set.add(sum(x[0] for x in combination_tuple))\n    return [tuple(sorted([x[0]] + [y[1] for y in combination_tuple])) for sum_ in sum_set for combination_tuple in combinations(tuples_list, len(sum_set)) if sum(x[0] for x in combination_tuple) == sum_]\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n"}
{"task_id": "Mbpp/781", "completion": "\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Test the function\nassert count_divisors(10)\n"}
{"task_id": "Mbpp/782", "completion": "\ndef odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += arr[j]\n    return total\n\nassert odd_length_sum([1,2,4]) == 14\n"}
{"task_id": "Mbpp/783", "completion": "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx * 100\n    return (h, s, v)\n"}
{"task_id": "Mbpp/784", "completion": "\ndef mul_even_odd(lst):\n    even_num = 1\n    odd_num = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n    return even_num * odd_num\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n"}
{"task_id": "Mbpp/785", "completion": "\ndef tuple_str_int(s):\n    # Remove the parentheses from the string\n    s = s.replace(\"(\", \"\").replace(\")\", \"\")\n    # Split the string into a list of strings\n    num_strs = s.split(\", \")\n    # Convert each string to an integer and create a tuple\n    return tuple(int(num) for num in num_strs)\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n"}
{"task_id": "Mbpp/786", "completion": "\ndef right_insertion(sorted_list, value):\n    \"\"\"\n    This function locates the right insertion point for a specified value in a sorted list.\n    It returns the index where the value should be inserted to maintain the sorted order.\n    \"\"\"\n    low = 0\n    high = len(sorted_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"}
{"task_id": "Mbpp/787", "completion": "\ndef text_match_three(text):\n    pattern = \"ab{3}\"\n    return bool(re.search(pattern, text))\n"}
{"task_id": "Mbpp/788", "completion": "\ndef new_tuple(lst, string):\n    return tuple(lst + [string])\n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n"}
{"task_id": "Mbpp/790", "completion": "\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if i+1 < len(lst) and lst[i] % 2 == 0 and lst[i+1] % 2!= 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/791", "completion": "\ndef remove_nested(tup):\n    if isinstance(tup, tuple):\n        return tuple(remove_nested(item) for item in tup if not isinstance(item, tuple))\n    else:\n        return tup\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n"}
{"task_id": "Mbpp/792", "completion": "\ndef count_list(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1 + count_list(item)\n        else:\n            continue\n    return count\n\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n"}
{"task_id": "Mbpp/793", "completion": "\ndef last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n"}
{"task_id": "Mbpp/794", "completion": "\ndef text_starta_endb(text):\n    return text.startswith('a') and text.endswith('b') and 'a' in text[:-1]\n"}
{"task_id": "Mbpp/796", "completion": "\ndef return_sum(dictionary):\n    return sum(dictionary.values())\n"}
{"task_id": "Mbpp/797", "completion": "\ndef sum_in_range(l, r):\n    total = 0\n    for num in range(l, r+1):\n        if num % 2!= 0:\n            total += num\n    return total\n\nassert sum_in_range(2,5) == 8\n"}
{"task_id": "Mbpp/798", "completion": "\ndef _sum(arr):\n    return sum(arr)\n\nassert _sum([1, 2, 3]) == 6\n"}
{"task_id": "Mbpp/799", "completion": "\ndef left_rotate(n, d):\n    return (n << d)|(n >> (32 - d))\n\nassert left_rotate(16,2) == 64\n"}
{"task_id": "Mbpp/800", "completion": "\ndef remove_all_spaces(s):\n    return s.replace(' ', '')\n"}
{"task_id": "Mbpp/801", "completion": "\ndef count_equal(a, b, c):\n    count = 0\n    if a == b == c:\n        count = 3\n    elif a == b:\n        count = 2\n    elif a == c or b == c:\n        count = 2\n    return count\n\n# Test the function\nassert count_equal(1,1,1) == 3\n"}
{"task_id": "Mbpp/803", "completion": "\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n"}
{"task_id": "Mbpp/804", "completion": "\ndef is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0\n\nassert is_product_even([1,2,3])\n"}
{"task_id": "Mbpp/805", "completion": "\ndef max_sum_list(lst):\n    max_sum = 0\n    max_list = []\n    for sublist in lst:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            max_list = sublist\n    return max_list\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n"}
{"task_id": "Mbpp/806", "completion": "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for c in s:\n        if c.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n"}
{"task_id": "Mbpp/807", "completion": "\ndef first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"}
{"task_id": "Mbpp/808", "completion": "\ndef check_K(tuples, k):\n    return k in tuples\n\n# Test the function\nassert check_K((10, 4, 5, 6, 8), 6) == True\n"}
{"task_id": "Mbpp/809", "completion": "\ndef check_smaller(t1, t2):\n    return all(x < y for x, y in zip(t1, t2))\n"}
