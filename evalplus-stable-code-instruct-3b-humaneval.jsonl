{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    group = \"\"\n    \n    for char in paren_string:\n        if char == '(':\n            if stack:\n                group += char\n            stack.append(char)\n        elif char == ')':\n            group += char\n            stack.pop()\n            if not stack:\n                result.append(group)\n                group = \"\"\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    max_depths = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        max_depths.append(max_depth)\n    return max_depths\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [string for string in strings if substring in string]\n"}
{"task_id": "HumanEval/8", "completion": "\n    total_sum = 0\n    total_product = 1\n    \n    for num in numbers:\n        total_sum += num\n        total_product *= num\n        \n    return total_sum, total_product\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_values = []\n    current_max = numbers[0]\n    max_values.append(current_max)\n\n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        max_values.append(current_max)\n\n    return max_values\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            suffix = string[i:]\n            prefix = string[:i]\n            break\n\n    reversed_prefix = prefix[::-1]\n    palindrome = string + reversed_prefix\n    return palindrome\n"}
{"task_id": "HumanEval/11", "completion": "\n    # Convert strings to binary numbers and perform XOR operation\n    result = bin(int(a, 2) ^ int(b, 2))[2:]\n    # Since the result is a binary number, we need to convert it back to a string\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b!= 0:\n        a, b = b, a % b\n    return abs(a)\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/15", "completion": "\n    return''.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    # Convert the string to lowercase to ensure case-insensitive comparison\n    string = string.lower()\n    \n    # Use a set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the string\n    for char in string:\n        # Add the character to the set\n        unique_chars.add(char)\n    \n    # Return the number of unique characters\n    return len(unique_chars)\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    len_sub = len(substring)\n    for i in range(0, len(string), len_sub):\n        if string[i:i+len_sub] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    number_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    \n    number_list = [number_map[num] for num in numbers.split()]\n    number_list.sort()\n    \n    sorted_numbers = [\n        list(number_map.keys())[list(number_map.values()).index(num)] for num in number_list\n    ]\n    \n    return \" \".join(sorted_numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n            \n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    \n    # Check for 2 as a factor\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    \n    # Check for odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    \n    # If the remaining number is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n\n\n# Test cases\nprint(factorize(8))  # [2, 2, 2]\nprint(factorize(25))  # [5, 5]\nprint(factorize(70))  # [2, 5, 7]\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n\n# Test cases\nprint(concatenate([]))  # Output: ''\nprint(concatenate(['a', 'b', 'c']))  # Output: 'abc'\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [string for string in strings if string.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2!= 0 or xs[-1] == 0:\n        raise ValueError(\"Invalid input\")\n\n    a1 = xs[1]\n    a2 = xs[2]\n    delta = a2 ** 2 - 4 * a1 * xs[-1]\n    if delta < 0:\n        raise ValueError(\"No real root exists\")\n\n    sqrt_delta = math.sqrt(delta)\n    x1 = (-a2 + sqrt_delta) / (2 * a1)\n    x2 = (-a2 - sqrt_delta) / (2 * a1)\n    return min(x1, x2)\n"}
{"task_id": "HumanEval/33", "completion": "\n    # Get the elements at indices divisible by 3\n    div_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the elements at indices divisible by 3\n    sorted_div_by_3 = sorted(div_by_3)\n    \n    # Create a new list with the sorted elements at indices divisible by 3 and the original elements at other indices\n    result = [None] * len(l)\n    result[::3] = sorted_div_by_3\n    result[1::3] = l[1::3]\n    result[2::3] = l[2::3]\n    \n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_nums = sorted([l[i] for i in range(0, len(l), 2)])\n    for i, num in enumerate(even_nums):\n        l[i*2] = num\n    return l\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            if n == 1:\n                return fib_num\n            n -= 1\n        i += 1\n"}
{"task_id": "HumanEval/40", "completion": "\n    # Sort the list\n    l.sort()\n\n    # Iterate over the list\n    for i in range(len(l) - 2):\n        # Initialize two pointers\n        left = i + 1\n        right = len(l) - 1\n\n        # Find the other two elements that sum to zero with the current element\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n\n    # If no three elements sum to zero, return False\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    # Since the cars are moving in the same direction, they will never collide if the\n    # distance between them is greater than the sum of their respective lengths.\n    # Therefore, the maximum possible distance between two colliding cars is n - 1.\n    # We can iterate through this range and count the number of collisions.\n    collisions = 0\n    for i in range(1, n):\n        # Calculate the number of cars on the left and right side of the current car.\n        left_cars = i\n        right_cars = n - i\n        # Calculate the maximum possible distance between the current car and its\n        # counterpart on the opposite side.\n        max_distance = min(left_cars, right_cars)\n        # If the maximum possible distance is greater than 0, there will be a collision.\n        if max_distance > 0:\n            collisions += 1\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x == 0:\n        return '0'\n    \n    digits = \"0123456789ABCDEF\"\n    result = ''\n    \n    while x:\n        x, remainder = divmod(x, base)\n        result = digits[remainder] + result\n    \n    return result\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n < 4:\n        return {0: 0, 1: 0, 2: 2, 3: 0}[n]\n    else:\n        fib_values = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib_values.append(fib_values[-1] + fib_values[-2] + fib_values[-3] + fib_values[-4])\n        return fib_values[n]\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    text = ''.join(c for c in text if c.isalnum())\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    # Calculate 2^n using binary exponentiation\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(i < t for i in l)\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True\n\n    increasing = all(l[i] < l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] > l[i + 1] for i in range(len(l) - 1))\n\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    common_elements = sorted(set(l1) & set(l2))\n    return common_elements\n"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            if is_prime(i):\n                return i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i*coeff for i, coeff in enumerate(xs)][1:]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n < 3:\n        return [0, 0, 1][n]\n    a, b, c = 0, 0, 1\n    for _ in range(n - 2):\n        a, b, c = b, c, a + b + c\n    return c\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    # Convert the integer to a string\n    x_str = str(x)\n    \n    # Calculate the number of digits in x\n    num_digits = len(x_str)\n    \n    # If shift is greater than the number of digits, return the digits reversed\n    if shift >= num_digits:\n        return x_str[::-1]\n    \n    # Perform the circular shift by shifting the digits to the right by shift\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    \n    return shifted_str\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    s = s.replace(\"apples\", \"0\").replace(\"oranges\", \"1\")\n    s = int(s.split(\"and\")[1].strip())\n    mango = n - s\n    return mango\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr or all(not val % 2 for val in arr):\n        return []\n    \n    min_even_val = min(val for idx, val in enumerate(arr) if val % 2 == 0)\n    min_even_indices = [idx for idx, val in enumerate(arr) if val == min_even_val]\n    \n    return [min_even_val, min(min_even_indices)]\n"}
{"task_id": "HumanEval/69", "completion": "\n    \n    # Create a dictionary to store the frequency of each number in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the maximum number that meets the criteria\n    max_num = -1\n    for num in freq_dict:\n        if num > 0 and freq_dict[num] >= num and num > max_num:\n            max_num = num\n    \n    return max_num\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    \n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))  # add min\n        if lst:\n            result.append(lst.pop(-1))  # add max\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the given sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the given sides do not form a valid triangle\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    # Check if the list is a palindrome\n    if q == q[::-1]:\n        # Calculate the sum of the elements\n        total = sum(q)\n        # Check if the sum is less than or equal to the maximum possible weight\n        if total <= w:\n            return True\n    return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left]!= arr[right]:\n            changes += 1\n            if arr[left] < arr[right]:\n                arr[left] = arr[right]\n            else:\n                arr[right] = arr[left]\n        left += 1\n        right -= 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    total_chars_lst1 = sum(len(i) for i in lst1)\n    total_chars_lst2 = sum(len(i) for i in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    factors = []\n    for prime in primes:\n        if a % prime == 0:\n            factors.append(prime)\n            while a % prime == 0:\n                a //= prime\n    return len(factors) == 3 and all(is_prime(f) for f in factors) and a == 1\n"}
{"task_id": "HumanEval/76", "completion": "\n    return n ** int(math.log(x, n)) == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    import math\n    cube_root = round(a ** (1. / 3))\n    return cube_root ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3]))!= 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 2  # 1, 10 are both 1-digit numbers starting or ending with 1\n    else:\n        # For n-digit numbers, the first digit can be any number from 2 to 9,\n        # and the remaining (n-2) digits can be any number from 0 to 9.\n        # So, there are (9 - 2 + 1) * 10^(n-2) such numbers.\n        # For the last digit to be 1, there is only 1 such number.\n        return (9 - 2 + 1) * 10 ** (n - 2) + 1\n"}
{"task_id": "HumanEval/84", "completion": "\n    binary_num = bin(N)[2:]  # Convert the given number to binary\n    sum_of_digits = sum(int(digit) for digit in binary_num)  # Calculate the sum of digits\n    return str(sum_of_digits)  # Return the sum as a string\n"}
{"task_id": "HumanEval/85", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return''.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda a: (a[0], -a[1]))\n    return result\n"}
{"task_id": "HumanEval/88", "completion": "\n    # Copy the array to avoid modifying the original array\n    sorted_array = array.copy()\n\n    # Calculate the sum of the first and last index values\n    first_index = 0\n    last_index = len(sorted_array) - 1\n    sum_values = sorted_array[first_index] + sorted_array[last_index]\n\n    # Sort the array based on the sum of the first and last index values\n    if sum_values % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n\n    return sorted_array\n"}
{"task_id": "HumanEval/89", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) % 26\n            if char.islower():\n                result += chr(ord('a') + shift)\n            else:\n                result += chr(ord('A') + shift)\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    boredom_count = 0\n    sentences = S.replace('!', '.').replace('?', '.').split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "\n    # Check if all numbers are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    # Check if one of the numbers is equal to the sum of the other two\n    elif x + y == z or x + z == y or y + z == x:\n        return True\n    # Return False in any other cases\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the position of the vowel in the string 'vowels'\n                vowel_index = vowels.index(char.lower())\n                # Get the character 2 places ahead in the 'vowels' string\n                replacement_char = vowels[(vowel_index + 2) % len(vowels)]\n                # If the original character was uppercase, convert the replacement character to uppercase\n                if char.isupper():\n                    replacement_char = replacement_char.upper()\n                encoded_message += replacement_char\n            else:\n                # If the character is not a vowel, swap its case and add it to the encoded message\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            # If the character is not a letter, just add it to the encoded message as is\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == 0:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    all_lower = all([k.islower() for k in dict.keys()])\n    all_upper = all([k.isupper() for k in dict.keys()])\n    return all_lower or all_upper\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    unit_digits_product = 1\n    a = abs(a)  # Make sure a is positive\n    b = abs(b)  # Make sure b is positive\n\n    for digit in str(a):\n        unit_digits_product *= int(digit)\n\n    for digit in str(b):\n        unit_digits_product *= int(digit)\n\n    return unit_digits_product\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n"}
{"task_id": "HumanEval/100", "completion": "\n    result = [n]\n    while n % 2 == 0:\n        n = n // 2\n    for _ in range(n):\n        if n % 2 == 0:\n            n += 1\n        result.append(n)\n    return result\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(',', '').split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    # Initialize the result as -1\n    result = -1\n\n    # Iterate over the range from x to y inclusive\n    for num in range(x, y+1):\n        # Check if the number is even\n        if num % 2 == 0:\n            # Update the result if a bigger even number is found\n            result = max(result, num)\n\n    # Return the result\n    return result\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    avg = round((sum(range(n, m+1)) / (m-n+1)))\n    return bin(avg)[2:]\n"}
{"task_id": "HumanEval/104", "completion": "\n    result = []\n    for num in x:\n        digits = [int(d) for d in str(num)]\n        if not any(d % 2 == 0 for d in digits):\n            result.append(num)\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Filter the array to only include numbers between 1 and 9\n    valid_nums = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the valid numbers\n    valid_nums.sort()\n    \n    # Reverse the sorted array\n    valid_nums.reverse()\n    \n    # Create a mapping of numbers to their names\n    num_to_name = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    \n    # Replace each number in the array with its name\n    result = [num_to_name[num] for num in valid_nums]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1 if i == 0 else 1 * 2 *... * i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        digits_sum = 0\n        num_str = str(abs(num))\n        for digit in num_str:\n            digits_sum += int(digit)\n        if digits_sum > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    \n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/110", "completion": "\n    # Count the number of odd numbers in lst1\n    odd_count = sum(1 for num in lst1 if num % 2!= 0)\n    \n    # Check if it is possible to exchange elements to make lst1 have only even numbers\n    if odd_count <= len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    \n    # Initialize an empty dictionary\n    result = {}\n    \n    # Split the input string into a list of words\n    words = test.split()\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Iterate over each character in the word\n        for char in word:\n            # If the character is already in the dictionary, increment its count\n            if char in result:\n                result[char] += 1\n            # If the character is not in the dictionary, add it with a count of 1\n            else:\n                result[char] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(result.values())\n    \n    # Create a new dictionary with only the keys that have the maximum count\n    result = {key: value for key, value in result.items() if value == max_count}\n    \n    return result\n"}
{"task_id": "HumanEval/112", "completion": "\n    # Remove all occurrences of characters in c from s\n    for char in c:\n        s = s.replace(char, '')\n    \n    # Check if the result string is a palindrome\n    reversed_s = s[::-1]\n    is_palindrome = s == reversed_s\n    \n    return (s, is_palindrome)\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, s in enumerate(lst):\n        count = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {i+1} of the {count}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        current_sum = max(current_sum, 0)\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    # Initialize the counter for the number of bucket lowerings\n    bucket_lowerings = 0\n\n    # Iterate over each well in the grid\n    for i in range(len(grid)):\n        # Initialize the current bucket level\n        bucket_level = 0\n\n        # Iterate over each unit in the well\n        for j in range(len(grid[i])):\n            # If the unit is 1 (representing water), add it to the bucket level\n            if grid[i][j] == 1:\n                bucket_level += 1\n\n            # If the bucket level exceeds the capacity, empty the well completely\n            if bucket_level > capacity:\n                # Subtract the excess units from the bucket level\n                bucket_level -= capacity\n\n                # Increment the bucket lowerings counter\n                bucket_lowerings += 1\n\n                # Reset the bucket level to 0\n                bucket_level = 0\n\n    # Return the total number of bucket lowerings\n    return bucket_lowerings\n"}
{"task_id": "HumanEval/116", "completion": "\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    words = s.split()\n    result = []\n    \n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    \n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"AEIOUaeiou\"\n    word = word[::-1]  # Reverse the word for easier processing\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    count = 0\n    for s in lst:\n        count += s.count('(')\n        count -= s.count(')')\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    # First, we sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Then, we return the first k elements of the sorted array\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    # Filter the first k elements to have at most two digits\n    filtered_arr = [x for x in arr[:k] if 999999 >= x >= 10000]\n    # Calculate the sum of the filtered elements\n    return sum(filtered_arr)\n"}
{"task_id": "HumanEval/123", "completion": "\n    sequence = []\n    while n!= 1:\n        if n % 2!= 0:  # if n is odd\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(list(set(sequence)))\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n    \n    if not date:\n        return False\n    \n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt.lower():\n            if char.isalpha() and (ord(char) - ord('a')) % 2 == 1:\n                odd_count += 1\n        return odd_count\n"}
{"task_id": "HumanEval/126", "completion": "\n    # Check if list is empty\n    if not lst:\n        return True\n\n    # Check if list has more than 1 duplicate of the same number\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # If more than 1 duplicate of the same number, return False\n    if any(count > 1 for count in counts.values()):\n        return False\n\n    # Check if list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    intersection_length = end - start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n\n    sign_product = 1\n    num_sum = 0\n\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num > 0:\n            sign_product *= 1\n\n        num_sum += abs(num)\n\n    return sign_product * num_sum\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    visited = set()\n    paths = []\n\n    def dfs(x, y, k, path):\n        if k == 0:\n            paths.append(path)\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx * n + ny) not in visited:\n                visited.add(nx * n + ny)\n                dfs(nx, ny, k - 1, path + [grid[nx][ny]])\n                visited.remove(nx * n + ny)\n\n    for i in range(n):\n        for j in range(n):\n            visited.add(i * n + j)\n            dfs(i, j, k - 1, [grid[i][j]])\n            visited.remove(i * n + j)\n\n    paths.sort()\n    return paths[0]\n"}
{"task_id": "HumanEval/130", "completion": "\n    trib = [1]\n    if n >= 1:\n        trib.append(3)\n    if n >= 2:\n        trib.append(1 + n//2)\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            trib.append(1 + i//2)\n        else:\n            trib.append(trib[-1] + trib[-2] + trib[-3])\n    return trib\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    return product if product > 1 else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return bool(stack)\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(ceil(x))**2 for x in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not txt[-2].isalpha():\n        return True\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    \n    # Initialize variables\n    max_neg = None\n    min_pos = None\n    \n    # Iterate over the list\n    for num in lst:\n        # Check for negative number\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        # Check for positive number\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    # Return the result\n    return (max_neg, min_pos)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 4 or n % 2!= 0:\n        return False\n    \n    for i in range(2, n - 3, 2):\n        if n - i < 4 * i:\n            return False\n        if n - i - 4 * (i // 2) >= 0 and (n - i - 4 * (i // 2)) % 2 == 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result\n\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of a given number.\"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/140", "completion": "\n    import re\n    text = re.sub(r'\\s{3,}', '-', text.replace(' ', '_'))\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n    \n    # Check if the file name contains exactly one dot '.'\n    if file_name.count('.')!= 1:\n        return 'No'\n    \n    # Split the file name into two parts: before and after the dot\n    before_dot, after_dot = file_name.split('.')\n    \n    # Check if the substring before the dot starts with a latin alphapet letter and is not empty\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = ''\n    for word in words:\n        if is_prime(len(word)):\n            result += word +''\n    return result.strip()\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n\n    gcd_val = gcd(result_num, result_denom)\n\n    result_num //= gcd_val\n    result_denom //= gcd_val\n\n    return result_num % result_denom == 0\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    \n    if planet1_index == -1 or planet2_index == -1:\n        return ()\n    \n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    \n    return tuple(planets[planet1_index+1:planet2_index])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    \n    # Initialize the sum to 0\n    sum_of_squares = 0\n    \n    # Iterate over the list\n    for num in lst:\n        # Check if the number is odd, not negative, and an integer\n        if num % 2!= 0 and num >= 0 and isinstance(num, int):\n            # Add the square of the number to the sum\n            sum_of_squares += num ** 2\n    \n    # Return the sum\n    return sum_of_squares\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(g-x) for g,x in zip(guess,game)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = extensions[0]\n    strongest_strength = calculate_strength(strongest_extension)\n\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"\n\ndef calculate_strength(extension):\n    CAP = sum(1 for char in extension if char.isupper())\n    SM = sum(1 for char in extension if char.islower())\n    return CAP - SM\n"}
{"task_id": "HumanEval/154", "completion": "\n    b_len = len(b)\n    for _ in range(b_len):\n        rotated_b = b[_+1:] + b[:_]\n        if rotated_b in a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    num_str = str(abs(num))  # convert the number to string and handle negative numbers\n    even_count = sum(int(digit) % 2 == 0 for digit in num_str)  # count the number of even digits\n    odd_count = len(num_str) - even_count  # count the number of odd digits\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Input must be between 1 and 1000\")\n\n    roman_numerals = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Check if the triangle is valid (sum of any two sides should be greater than the third side)\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return False\n    \n    # Check if the triangle is right-angled\n    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    \n    return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_word = max(words, key=lambda word: (len(set(word)), word))\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    eaten = number + min(need, remaining)\n    left = remaining - eaten\n    return [eaten, left]\n"}
{"task_id": "HumanEval/160", "completion": "\n    expr = str(operand[0])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expr +='+'+ str(operand[i+1])\n        elif operator[i] == '-':\n            expr +='-'+ str(operand[i+1])\n        elif operator[i] == '*':\n            expr +='*'+ str(operand[i+1])\n        elif operator[i] == '//':\n            expr +='//'+ str(operand[i+1])\n        elif operator[i] == '**':\n            expr +='**'+ str(operand[i+1])\n    result = eval(expr)\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    \n    # Check if the string contains any letters\n    if any(char.isalpha() for char in s):\n        # Convert the string to a list to allow in-place modification\n        s_list = list(s)\n        \n        # Iterate over the characters in the list\n        for i in range(len(s_list)):\n            # Check if the character is a letter\n            if s_list[i].isalpha():\n                # Reverse the case of the letter\n                s_list[i] = s_list[i].swapcase()\n        \n        # Convert the list back to a string and return it\n        return ''.join(s_list)\n    else:\n        # If the string contains no letters, reverse it and return it\n        return s[::-1]\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None\n"}
{"task_id": "HumanEval/163", "completion": "\n    even_digits = []\n    if a % 2 == 0:\n        even_digits.append(a)\n    if b % 2 == 0:\n        even_digits.append(b)\n    for num in range(a + 1, b, 2):\n        even_digits.append(num)\n    return sorted(even_digits)\n"}
